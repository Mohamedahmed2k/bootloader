
BootLoader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022d8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  080023e4  080023e4  000123e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002418  08002418  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002418  08002418  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002418  08002418  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002418  08002418  00012418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800241c  0800241c  0001241c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002420  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  20000010  0800242c  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200001f8  0800242c  000201f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008340  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001dfd  00000000  00000000  000283b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000858  00000000  00000000  0002a1b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000644  00000000  00000000  0002aa10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017673  00000000  00000000  0002b054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b6d8  00000000  00000000  000426c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00082974  00000000  00000000  0004dd9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001f58  00000000  00000000  000d0714  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  000d266c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	080023cc 	.word	0x080023cc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	080023cc 	.word	0x080023cc

0800014c <CBL_GET_Version>:
	va_end(args);

}

static void CBL_GET_Version(uint8_t *Host_Buffer)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	uint8_t version[4]= {CBL_VENDOR_ID,CBL_SW_MAJOR_VERSION,CBL_SW_MINOR_VERSION,CBL_SW_PATCH_VERSION} ;
 8000154:	4b16      	ldr	r3, [pc, #88]	; (80001b0 <CBL_GET_Version+0x64>)
 8000156:	60fb      	str	r3, [r7, #12]
	uint16_t Host_Packet_Len = 0 ;
 8000158:	2300      	movs	r3, #0
 800015a:	82fb      	strh	r3, [r7, #22]
	uint32_t CRC_Value = 0;
 800015c:	2300      	movs	r3, #0
 800015e:	613b      	str	r3, [r7, #16]
	Host_Packet_Len = Host_Buffer[0] + 1 ;
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	781b      	ldrb	r3, [r3, #0]
 8000164:	b29b      	uxth	r3, r3
 8000166:	3301      	adds	r3, #1
 8000168:	82fb      	strh	r3, [r7, #22]
	CRC_Value = *(uint32_t*)(Host_Buffer + Host_Packet_Len-4) ;
 800016a:	8afb      	ldrh	r3, [r7, #22]
 800016c:	3b04      	subs	r3, #4
 800016e:	687a      	ldr	r2, [r7, #4]
 8000170:	4413      	add	r3, r2
 8000172:	681b      	ldr	r3, [r3, #0]
 8000174:	613b      	str	r3, [r7, #16]
	if(CRC_VERIFYING_PASS == BL_CRC_Verify((uint8_t*) &Host_Buffer[0], Host_Packet_Len-4, CRC_Value))
 8000176:	8afb      	ldrh	r3, [r7, #22]
 8000178:	3b04      	subs	r3, #4
 800017a:	693a      	ldr	r2, [r7, #16]
 800017c:	4619      	mov	r1, r3
 800017e:	6878      	ldr	r0, [r7, #4]
 8000180:	f000 fa3e 	bl	8000600 <BL_CRC_Verify>
 8000184:	4603      	mov	r3, r0
 8000186:	2b01      	cmp	r3, #1
 8000188:	d10b      	bne.n	80001a2 <CBL_GET_Version+0x56>
	{
		BL_Send_ACK(4) ;
 800018a:	2004      	movs	r0, #4
 800018c:	f000 fa0c 	bl	80005a8 <BL_Send_ACK>
		HAL_UART_Transmit(&huart1,(uint8_t*)version,4,HAL_MAX_DELAY);
 8000190:	f107 010c 	add.w	r1, r7, #12
 8000194:	f04f 33ff 	mov.w	r3, #4294967295
 8000198:	2204      	movs	r2, #4
 800019a:	4806      	ldr	r0, [pc, #24]	; (80001b4 <CBL_GET_Version+0x68>)
 800019c:	f001 fed8 	bl	8001f50 <HAL_UART_Transmit>
	}
	else
	{
		BL_Send_NACK() ;
	}
}
 80001a0:	e001      	b.n	80001a6 <CBL_GET_Version+0x5a>
		BL_Send_NACK() ;
 80001a2:	f000 fa1b 	bl	80005dc <BL_Send_NACK>
}
 80001a6:	bf00      	nop
 80001a8:	3718      	adds	r7, #24
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	00010164 	.word	0x00010164
 80001b4:	200000fc 	.word	0x200000fc

080001b8 <CBL_GET_Help>:

static void CBL_GET_Help(uint8_t *Host_Buffer)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b086      	sub	sp, #24
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]
	uint8_t BL_Supported_CMS[6]=
 80001c0:	4a19      	ldr	r2, [pc, #100]	; (8000228 <CBL_GET_Help+0x70>)
 80001c2:	f107 0308 	add.w	r3, r7, #8
 80001c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80001ca:	6018      	str	r0, [r3, #0]
 80001cc:	3304      	adds	r3, #4
 80001ce:	8019      	strh	r1, [r3, #0]
			CBL_GET_CID_CMD,
			CBL_GO_TO_ADDR_CMD,
			CBL_FLASH_ERASE_CMD,
			CBL_MEM_WRITE_CMD
	};
	uint16_t Host_Packet_Len = 0 ;
 80001d0:	2300      	movs	r3, #0
 80001d2:	82fb      	strh	r3, [r7, #22]
	uint32_t CRC_Value = 0;
 80001d4:	2300      	movs	r3, #0
 80001d6:	613b      	str	r3, [r7, #16]
	Host_Packet_Len = Host_Buffer[0] + 1 ;
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	781b      	ldrb	r3, [r3, #0]
 80001dc:	b29b      	uxth	r3, r3
 80001de:	3301      	adds	r3, #1
 80001e0:	82fb      	strh	r3, [r7, #22]
	CRC_Value = *(uint32_t*)(Host_Buffer + Host_Packet_Len-4) ;
 80001e2:	8afb      	ldrh	r3, [r7, #22]
 80001e4:	3b04      	subs	r3, #4
 80001e6:	687a      	ldr	r2, [r7, #4]
 80001e8:	4413      	add	r3, r2
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	613b      	str	r3, [r7, #16]
	if(CRC_VERIFYING_PASS == BL_CRC_Verify((uint8_t*) &Host_Buffer[0], Host_Packet_Len-4, CRC_Value))
 80001ee:	8afb      	ldrh	r3, [r7, #22]
 80001f0:	3b04      	subs	r3, #4
 80001f2:	693a      	ldr	r2, [r7, #16]
 80001f4:	4619      	mov	r1, r3
 80001f6:	6878      	ldr	r0, [r7, #4]
 80001f8:	f000 fa02 	bl	8000600 <BL_CRC_Verify>
 80001fc:	4603      	mov	r3, r0
 80001fe:	2b01      	cmp	r3, #1
 8000200:	d10b      	bne.n	800021a <CBL_GET_Help+0x62>
	{
		BL_Send_ACK(6) ;
 8000202:	2006      	movs	r0, #6
 8000204:	f000 f9d0 	bl	80005a8 <BL_Send_ACK>
		HAL_UART_Transmit(&huart1,(uint8_t*)BL_Supported_CMS,6,HAL_MAX_DELAY);
 8000208:	f107 0108 	add.w	r1, r7, #8
 800020c:	f04f 33ff 	mov.w	r3, #4294967295
 8000210:	2206      	movs	r2, #6
 8000212:	4806      	ldr	r0, [pc, #24]	; (800022c <CBL_GET_Help+0x74>)
 8000214:	f001 fe9c 	bl	8001f50 <HAL_UART_Transmit>
	}
	else
	{
		BL_Send_NACK() ;
	}
}
 8000218:	e001      	b.n	800021e <CBL_GET_Help+0x66>
		BL_Send_NACK() ;
 800021a:	f000 f9df 	bl	80005dc <BL_Send_NACK>
}
 800021e:	bf00      	nop
 8000220:	3718      	adds	r7, #24
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	080023e4 	.word	0x080023e4
 800022c:	200000fc 	.word	0x200000fc

08000230 <CBL_GET_Chip_Identification_Number>:

static void CBL_GET_Chip_Identification_Number(uint8_t *Host_Buffer)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b086      	sub	sp, #24
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
	uint16_t Chip_ID = 0 ;
 8000238:	2300      	movs	r3, #0
 800023a:	81fb      	strh	r3, [r7, #14]
	uint16_t Host_Packet_Len = 0 ;
 800023c:	2300      	movs	r3, #0
 800023e:	82fb      	strh	r3, [r7, #22]
	uint32_t CRC_Value = 0;
 8000240:	2300      	movs	r3, #0
 8000242:	613b      	str	r3, [r7, #16]
	Host_Packet_Len = Host_Buffer[0] + 1 ;
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	b29b      	uxth	r3, r3
 800024a:	3301      	adds	r3, #1
 800024c:	82fb      	strh	r3, [r7, #22]
	CRC_Value = *(uint32_t*)(Host_Buffer + Host_Packet_Len-4) ;
 800024e:	8afb      	ldrh	r3, [r7, #22]
 8000250:	3b04      	subs	r3, #4
 8000252:	687a      	ldr	r2, [r7, #4]
 8000254:	4413      	add	r3, r2
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	613b      	str	r3, [r7, #16]
	if(CRC_VERIFYING_PASS == BL_CRC_Verify((uint8_t*) &Host_Buffer[0], Host_Packet_Len-4, CRC_Value))
 800025a:	8afb      	ldrh	r3, [r7, #22]
 800025c:	3b04      	subs	r3, #4
 800025e:	693a      	ldr	r2, [r7, #16]
 8000260:	4619      	mov	r1, r3
 8000262:	6878      	ldr	r0, [r7, #4]
 8000264:	f000 f9cc 	bl	8000600 <BL_CRC_Verify>
 8000268:	4603      	mov	r3, r0
 800026a:	2b01      	cmp	r3, #1
 800026c:	d112      	bne.n	8000294 <CBL_GET_Chip_Identification_Number+0x64>
	{
		Chip_ID = (uint16_t)(DBGMCU->IDCODE & 0x00000FFF) ;
 800026e:	4b0c      	ldr	r3, [pc, #48]	; (80002a0 <CBL_GET_Chip_Identification_Number+0x70>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	b29b      	uxth	r3, r3
 8000274:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000278:	b29b      	uxth	r3, r3
 800027a:	81fb      	strh	r3, [r7, #14]
		BL_Send_ACK(2) ;
 800027c:	2002      	movs	r0, #2
 800027e:	f000 f993 	bl	80005a8 <BL_Send_ACK>
		HAL_UART_Transmit(&huart1,(uint8_t*)&Chip_ID,2,HAL_MAX_DELAY);
 8000282:	f107 010e 	add.w	r1, r7, #14
 8000286:	f04f 33ff 	mov.w	r3, #4294967295
 800028a:	2202      	movs	r2, #2
 800028c:	4805      	ldr	r0, [pc, #20]	; (80002a4 <CBL_GET_Chip_Identification_Number+0x74>)
 800028e:	f001 fe5f 	bl	8001f50 <HAL_UART_Transmit>
	}
	else
	{
		BL_Send_NACK() ;
	}
}
 8000292:	e001      	b.n	8000298 <CBL_GET_Chip_Identification_Number+0x68>
		BL_Send_NACK() ;
 8000294:	f000 f9a2 	bl	80005dc <BL_Send_NACK>
}
 8000298:	bf00      	nop
 800029a:	3718      	adds	r7, #24
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	e0042000 	.word	0xe0042000
 80002a4:	200000fc 	.word	0x200000fc

080002a8 <CBL_Flash_Erase>:

static void CBL_Flash_Erase(uint8_t *Host_Buffer)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b086      	sub	sp, #24
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
	uint8_t Erase_Status = UNSUCCESSFUL_ERASE ;
 80002b0:	2302      	movs	r3, #2
 80002b2:	73fb      	strb	r3, [r7, #15]
	uint16_t Host_Packet_Len = 0 ;
 80002b4:	2300      	movs	r3, #0
 80002b6:	82fb      	strh	r3, [r7, #22]
	uint32_t CRC_Value = 0;
 80002b8:	2300      	movs	r3, #0
 80002ba:	613b      	str	r3, [r7, #16]
	Host_Packet_Len = Host_Buffer[0] + 1 ;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	b29b      	uxth	r3, r3
 80002c2:	3301      	adds	r3, #1
 80002c4:	82fb      	strh	r3, [r7, #22]
	CRC_Value = *(uint32_t*)(Host_Buffer + Host_Packet_Len-4) ;
 80002c6:	8afb      	ldrh	r3, [r7, #22]
 80002c8:	3b04      	subs	r3, #4
 80002ca:	687a      	ldr	r2, [r7, #4]
 80002cc:	4413      	add	r3, r2
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	613b      	str	r3, [r7, #16]
	if(CRC_VERIFYING_PASS == BL_CRC_Verify((uint8_t*) &Host_Buffer[0], Host_Packet_Len-4, CRC_Value))
 80002d2:	8afb      	ldrh	r3, [r7, #22]
 80002d4:	3b04      	subs	r3, #4
 80002d6:	693a      	ldr	r2, [r7, #16]
 80002d8:	4619      	mov	r1, r3
 80002da:	6878      	ldr	r0, [r7, #4]
 80002dc:	f000 f990 	bl	8000600 <BL_CRC_Verify>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b01      	cmp	r3, #1
 80002e4:	d117      	bne.n	8000316 <CBL_Flash_Erase+0x6e>
	{
		Erase_Status = Perform_Flash_Erase(*((uint32_t*)&Host_Buffer[2]),Host_Buffer[6]);
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	3302      	adds	r3, #2
 80002ea:	681a      	ldr	r2, [r3, #0]
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	3306      	adds	r3, #6
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	4619      	mov	r1, r3
 80002f4:	4610      	mov	r0, r2
 80002f6:	f000 f9bf 	bl	8000678 <Perform_Flash_Erase>
 80002fa:	4603      	mov	r3, r0
 80002fc:	73fb      	strb	r3, [r7, #15]
		BL_Send_ACK(1) ;
 80002fe:	2001      	movs	r0, #1
 8000300:	f000 f952 	bl	80005a8 <BL_Send_ACK>
		HAL_UART_Transmit(&huart1,(uint8_t*)&Erase_Status,1,HAL_MAX_DELAY);
 8000304:	f107 010f 	add.w	r1, r7, #15
 8000308:	f04f 33ff 	mov.w	r3, #4294967295
 800030c:	2201      	movs	r2, #1
 800030e:	4805      	ldr	r0, [pc, #20]	; (8000324 <CBL_Flash_Erase+0x7c>)
 8000310:	f001 fe1e 	bl	8001f50 <HAL_UART_Transmit>
	}
	else
	{
		BL_Send_NACK() ;
	}
}
 8000314:	e001      	b.n	800031a <CBL_Flash_Erase+0x72>
		BL_Send_NACK() ;
 8000316:	f000 f961 	bl	80005dc <BL_Send_NACK>
}
 800031a:	bf00      	nop
 800031c:	3718      	adds	r7, #24
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	200000fc 	.word	0x200000fc

08000328 <CBL_Write_Data>:


static void CBL_Write_Data(uint8_t *Host_Buffer)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b086      	sub	sp, #24
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
	uint8_t Address_Verify = ADDRESS_IS_INVALID ;
 8000330:	2300      	movs	r3, #0
 8000332:	72fb      	strb	r3, [r7, #11]
	uint32_t Address_Host = 0 ;
 8000334:	2300      	movs	r3, #0
 8000336:	617b      	str	r3, [r7, #20]
	uint8_t Data_Length = 0 ;
 8000338:	2300      	movs	r3, #0
 800033a:	74fb      	strb	r3, [r7, #19]
	uint8_t Payload_Status = FLASH_PAYLOAD_WRITE_FAILED ;
 800033c:	2300      	movs	r3, #0
 800033e:	72bb      	strb	r3, [r7, #10]
	uint16_t Host_Packet_Len = 0 ;
 8000340:	2300      	movs	r3, #0
 8000342:	823b      	strh	r3, [r7, #16]
	uint32_t CRC_Value = 0;
 8000344:	2300      	movs	r3, #0
 8000346:	60fb      	str	r3, [r7, #12]
	Host_Packet_Len = Host_Buffer[0] + 1 ;
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	b29b      	uxth	r3, r3
 800034e:	3301      	adds	r3, #1
 8000350:	823b      	strh	r3, [r7, #16]
	CRC_Value = *(uint32_t*)(Host_Buffer + Host_Packet_Len-4) ;
 8000352:	8a3b      	ldrh	r3, [r7, #16]
 8000354:	3b04      	subs	r3, #4
 8000356:	687a      	ldr	r2, [r7, #4]
 8000358:	4413      	add	r3, r2
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	60fb      	str	r3, [r7, #12]
	if(CRC_VERIFYING_PASS == BL_CRC_Verify((uint8_t*) &Host_Buffer[0], Host_Packet_Len-4, CRC_Value))
 800035e:	8a3b      	ldrh	r3, [r7, #16]
 8000360:	3b04      	subs	r3, #4
 8000362:	68fa      	ldr	r2, [r7, #12]
 8000364:	4619      	mov	r1, r3
 8000366:	6878      	ldr	r0, [r7, #4]
 8000368:	f000 f94a 	bl	8000600 <BL_CRC_Verify>
 800036c:	4603      	mov	r3, r0
 800036e:	2b01      	cmp	r3, #1
 8000370:	d12c      	bne.n	80003cc <CBL_Write_Data+0xa4>
	{
		BL_Send_ACK(1) ;
 8000372:	2001      	movs	r0, #1
 8000374:	f000 f918 	bl	80005a8 <BL_Send_ACK>
		Address_Host = *((uint32_t*)&Host_Buffer[2]) ;
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800037e:	617b      	str	r3, [r7, #20]
		Data_Length = Host_Buffer[6] ;
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	799b      	ldrb	r3, [r3, #6]
 8000384:	74fb      	strb	r3, [r7, #19]
		Address_Verify = BL_Address_Verification(Address_Host);
 8000386:	6978      	ldr	r0, [r7, #20]
 8000388:	f000 f828 	bl	80003dc <BL_Address_Verification>
 800038c:	4603      	mov	r3, r0
 800038e:	72fb      	strb	r3, [r7, #11]
		if(Address_Verify == ADDRESS_IS_VALID)
 8000390:	7afb      	ldrb	r3, [r7, #11]
 8000392:	2b01      	cmp	r3, #1
 8000394:	d111      	bne.n	80003ba <CBL_Write_Data+0x92>
		{
			Payload_Status = FlashMemory_Write((uint16_t*)&Host_Buffer[7], Address_Host, Data_Length) ;
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	3307      	adds	r3, #7
 800039a:	7cfa      	ldrb	r2, [r7, #19]
 800039c:	6979      	ldr	r1, [r7, #20]
 800039e:	4618      	mov	r0, r3
 80003a0:	f000 f9ba 	bl	8000718 <FlashMemory_Write>
 80003a4:	4603      	mov	r3, r0
 80003a6:	72bb      	strb	r3, [r7, #10]
			HAL_UART_Transmit(&huart1,(uint8_t*)&Payload_Status,1,HAL_MAX_DELAY);
 80003a8:	f107 010a 	add.w	r1, r7, #10
 80003ac:	f04f 33ff 	mov.w	r3, #4294967295
 80003b0:	2201      	movs	r2, #1
 80003b2:	4809      	ldr	r0, [pc, #36]	; (80003d8 <CBL_Write_Data+0xb0>)
 80003b4:	f001 fdcc 	bl	8001f50 <HAL_UART_Transmit>
	}
	else
	{
		BL_Send_NACK() ;
	}
}
 80003b8:	e00a      	b.n	80003d0 <CBL_Write_Data+0xa8>
			HAL_UART_Transmit(&huart1,(uint8_t*)&Address_Verify,1,HAL_MAX_DELAY);
 80003ba:	f107 010b 	add.w	r1, r7, #11
 80003be:	f04f 33ff 	mov.w	r3, #4294967295
 80003c2:	2201      	movs	r2, #1
 80003c4:	4804      	ldr	r0, [pc, #16]	; (80003d8 <CBL_Write_Data+0xb0>)
 80003c6:	f001 fdc3 	bl	8001f50 <HAL_UART_Transmit>
}
 80003ca:	e001      	b.n	80003d0 <CBL_Write_Data+0xa8>
		BL_Send_NACK() ;
 80003cc:	f000 f906 	bl	80005dc <BL_Send_NACK>
}
 80003d0:	bf00      	nop
 80003d2:	3718      	adds	r7, #24
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	200000fc 	.word	0x200000fc

080003dc <BL_Address_Verification>:

static uint8_t BL_Address_Verification(uint32_t Address)
{
 80003dc:	b480      	push	{r7}
 80003de:	b085      	sub	sp, #20
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
	uint8_t Address_Verify = ADDRESS_IS_INVALID ;
 80003e4:	2300      	movs	r3, #0
 80003e6:	73fb      	strb	r3, [r7, #15]
	if(Address >= FLASH_BASE && Address<= STM32F103_FLASH_END)
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80003ee:	d306      	bcc.n	80003fe <BL_Address_Verification+0x22>
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	4a0c      	ldr	r2, [pc, #48]	; (8000424 <BL_Address_Verification+0x48>)
 80003f4:	4293      	cmp	r3, r2
 80003f6:	d802      	bhi.n	80003fe <BL_Address_Verification+0x22>
	{
		Address_Verify = ADDRESS_IS_VALID ;
 80003f8:	2301      	movs	r3, #1
 80003fa:	73fb      	strb	r3, [r7, #15]
 80003fc:	e00c      	b.n	8000418 <BL_Address_Verification+0x3c>
	}
	else if(Address >= SRAM_BASE && Address<= STM32F103_SRAM_END)
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000404:	d306      	bcc.n	8000414 <BL_Address_Verification+0x38>
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	4a07      	ldr	r2, [pc, #28]	; (8000428 <BL_Address_Verification+0x4c>)
 800040a:	4293      	cmp	r3, r2
 800040c:	d802      	bhi.n	8000414 <BL_Address_Verification+0x38>
	{
		Address_Verify = ADDRESS_IS_VALID ;
 800040e:	2301      	movs	r3, #1
 8000410:	73fb      	strb	r3, [r7, #15]
 8000412:	e001      	b.n	8000418 <BL_Address_Verification+0x3c>
	}
	else
	{
		Address_Verify = ADDRESS_IS_VALID ;
 8000414:	2301      	movs	r3, #1
 8000416:	73fb      	strb	r3, [r7, #15]
	}
	return Address_Verify ;
 8000418:	7bfb      	ldrb	r3, [r7, #15]
}
 800041a:	4618      	mov	r0, r3
 800041c:	3714      	adds	r7, #20
 800041e:	46bd      	mov	sp, r7
 8000420:	bc80      	pop	{r7}
 8000422:	4770      	bx	lr
 8000424:	08010000 	.word	0x08010000
 8000428:	20005000 	.word	0x20005000

0800042c <bootloader_jump_to_user_app>:


static void bootloader_jump_to_user_app(uint8_t *Host_buffer)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b08a      	sub	sp, #40	; 0x28
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
	/* Extract Packet length Sent by the HOST */
	uint16_t Host_Packet_Len = Host_buffer[0]+1;
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	b29b      	uxth	r3, r3
 800043a:	3301      	adds	r3, #1
 800043c:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint32_t CRC_Value = 0;
 800043e:	2300      	movs	r3, #0
 8000440:	623b      	str	r3, [r7, #32]

	/* Extract CRC32 Sent by the HOST */
	CRC_Value = *(uint32_t*)(Host_Buffer + Host_Packet_Len-4) ;
 8000442:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000444:	3b04      	subs	r3, #4
 8000446:	4a1d      	ldr	r2, [pc, #116]	; (80004bc <bootloader_jump_to_user_app+0x90>)
 8000448:	4413      	add	r3, r2
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	623b      	str	r3, [r7, #32]
	if(CRC_VERIFYING_PASS == BL_CRC_Verify((uint8_t*) &Host_Buffer[0], Host_Packet_Len-4, CRC_Value))
 800044e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000450:	3b04      	subs	r3, #4
 8000452:	6a3a      	ldr	r2, [r7, #32]
 8000454:	4619      	mov	r1, r3
 8000456:	4819      	ldr	r0, [pc, #100]	; (80004bc <bootloader_jump_to_user_app+0x90>)
 8000458:	f000 f8d2 	bl	8000600 <BL_CRC_Verify>
 800045c:	4603      	mov	r3, r0
 800045e:	2b01      	cmp	r3, #1
 8000460:	d125      	bne.n	80004ae <bootloader_jump_to_user_app+0x82>
	{
		BL_Send_ACK(1);
 8000462:	2001      	movs	r0, #1
 8000464:	f000 f8a0 	bl	80005a8 <BL_Send_ACK>
		HAL_UART_Transmit(&huart1,(uint8_t*)FLASH_SECTOR2_BASE_ADDRESS,4,HAL_MAX_DELAY);
 8000468:	f04f 33ff 	mov.w	r3, #4294967295
 800046c:	2204      	movs	r2, #4
 800046e:	4914      	ldr	r1, [pc, #80]	; (80004c0 <bootloader_jump_to_user_app+0x94>)
 8000470:	4814      	ldr	r0, [pc, #80]	; (80004c4 <bootloader_jump_to_user_app+0x98>)
 8000472:	f001 fd6d 	bl	8001f50 <HAL_UART_Transmit>
 8000476:	2301      	movs	r3, #1
 8000478:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	f383 8810 	msr	PRIMASK, r3
}
 8000480:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 8000482:	b672      	cpsid	i
}
 8000484:	bf00      	nop

		//disbale interuppts
		__set_PRIMASK(1);
		__disable_irq();

		SCB->VTOR = FLASH_SECTOR2_BASE_ADDRESS;
 8000486:	4b10      	ldr	r3, [pc, #64]	; (80004c8 <bootloader_jump_to_user_app+0x9c>)
 8000488:	4a0d      	ldr	r2, [pc, #52]	; (80004c0 <bootloader_jump_to_user_app+0x94>)
 800048a:	609a      	str	r2, [r3, #8]

		// 1. configure the MSP by reading the value from the base address of the sector 2
		uint32_t msp_value = *(__IO uint32_t *)FLASH_SECTOR2_BASE_ADDRESS;
 800048c:	4b0c      	ldr	r3, [pc, #48]	; (80004c0 <bootloader_jump_to_user_app+0x94>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	61fb      	str	r3, [r7, #28]
 8000492:	69fb      	ldr	r3, [r7, #28]
 8000494:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000496:	693b      	ldr	r3, [r7, #16]
 8000498:	f383 8808 	msr	MSP, r3
}
 800049c:	bf00      	nop

		__set_MSP(msp_value);

		uint32_t resethandler_address = *(__IO uint32_t *) (FLASH_SECTOR2_BASE_ADDRESS + 4);
 800049e:	4b0b      	ldr	r3, [pc, #44]	; (80004cc <bootloader_jump_to_user_app+0xa0>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	61bb      	str	r3, [r7, #24]

		Reset_Handler = (void*) resethandler_address;
 80004a4:	69bb      	ldr	r3, [r7, #24]
 80004a6:	617b      	str	r3, [r7, #20]

		//3. jump to reset handler of the user application
		Reset_Handler();
 80004a8:	697b      	ldr	r3, [r7, #20]
 80004aa:	4798      	blx	r3
	}
	else
	{
		BL_Send_NACK();
	}
}
 80004ac:	e001      	b.n	80004b2 <bootloader_jump_to_user_app+0x86>
		BL_Send_NACK();
 80004ae:	f000 f895 	bl	80005dc <BL_Send_NACK>
}
 80004b2:	bf00      	nop
 80004b4:	3728      	adds	r7, #40	; 0x28
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	2000002c 	.word	0x2000002c
 80004c0:	08008000 	.word	0x08008000
 80004c4:	200000fc 	.word	0x200000fc
 80004c8:	e000ed00 	.word	0xe000ed00
 80004cc:	08008004 	.word	0x08008004

080004d0 <BL_FetchCmd>:



BL_Status BL_FetchCmd()
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0

	uint8_t Data_Length = 0;
 80004d6:	2300      	movs	r3, #0
 80004d8:	71bb      	strb	r3, [r7, #6]
	BL_Status status = BL_ACK ;
 80004da:	2301      	movs	r3, #1
 80004dc:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef HAL_Status= HAL_ERROR ;
 80004de:	2301      	movs	r3, #1
 80004e0:	717b      	strb	r3, [r7, #5]
	memset(Host_Buffer,0,HOST_MAX_SIZE);
 80004e2:	22c8      	movs	r2, #200	; 0xc8
 80004e4:	2100      	movs	r1, #0
 80004e6:	482d      	ldr	r0, [pc, #180]	; (800059c <BL_FetchCmd+0xcc>)
 80004e8:	f001 ff44 	bl	8002374 <memset>
	HAL_Status =  HAL_UART_Receive(&huart1,Host_Buffer,1,HAL_MAX_DELAY);
 80004ec:	f04f 33ff 	mov.w	r3, #4294967295
 80004f0:	2201      	movs	r2, #1
 80004f2:	492a      	ldr	r1, [pc, #168]	; (800059c <BL_FetchCmd+0xcc>)
 80004f4:	482a      	ldr	r0, [pc, #168]	; (80005a0 <BL_FetchCmd+0xd0>)
 80004f6:	f001 fdae 	bl	8002056 <HAL_UART_Receive>
 80004fa:	4603      	mov	r3, r0
 80004fc:	717b      	strb	r3, [r7, #5]
	if(HAL_Status != HAL_OK)
 80004fe:	797b      	ldrb	r3, [r7, #5]
 8000500:	2b00      	cmp	r3, #0
 8000502:	d002      	beq.n	800050a <BL_FetchCmd+0x3a>
	{
		status = BL_NACK ;
 8000504:	2300      	movs	r3, #0
 8000506:	71fb      	strb	r3, [r7, #7]
 8000508:	e042      	b.n	8000590 <BL_FetchCmd+0xc0>
	}
	else {
		Data_Length = Host_Buffer[0] ;
 800050a:	4b24      	ldr	r3, [pc, #144]	; (800059c <BL_FetchCmd+0xcc>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	71bb      	strb	r3, [r7, #6]
		HAL_Status =  HAL_UART_Receive(&huart1,&Host_Buffer[1],Data_Length,HAL_MAX_DELAY);
 8000510:	79bb      	ldrb	r3, [r7, #6]
 8000512:	b29a      	uxth	r2, r3
 8000514:	f04f 33ff 	mov.w	r3, #4294967295
 8000518:	4922      	ldr	r1, [pc, #136]	; (80005a4 <BL_FetchCmd+0xd4>)
 800051a:	4821      	ldr	r0, [pc, #132]	; (80005a0 <BL_FetchCmd+0xd0>)
 800051c:	f001 fd9b 	bl	8002056 <HAL_UART_Receive>
 8000520:	4603      	mov	r3, r0
 8000522:	717b      	strb	r3, [r7, #5]
		if(HAL_Status != HAL_OK)
 8000524:	797b      	ldrb	r3, [r7, #5]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d002      	beq.n	8000530 <BL_FetchCmd+0x60>
		{
			status = BL_NACK ;
 800052a:	2300      	movs	r3, #0
 800052c:	71fb      	strb	r3, [r7, #7]
 800052e:	e02f      	b.n	8000590 <BL_FetchCmd+0xc0>
		}
		else {
			switch(Host_Buffer[1])
 8000530:	4b1a      	ldr	r3, [pc, #104]	; (800059c <BL_FetchCmd+0xcc>)
 8000532:	785b      	ldrb	r3, [r3, #1]
 8000534:	3b10      	subs	r3, #16
 8000536:	2b06      	cmp	r3, #6
 8000538:	d828      	bhi.n	800058c <BL_FetchCmd+0xbc>
 800053a:	a201      	add	r2, pc, #4	; (adr r2, 8000540 <BL_FetchCmd+0x70>)
 800053c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000540:	0800055d 	.word	0x0800055d
 8000544:	08000565 	.word	0x08000565
 8000548:	0800056d 	.word	0x0800056d
 800054c:	0800058d 	.word	0x0800058d
 8000550:	08000575 	.word	0x08000575
 8000554:	0800057d 	.word	0x0800057d
 8000558:	08000585 	.word	0x08000585
			{
			case CBL_GET_VER_CMD :CBL_GET_Version(Host_Buffer);break;
 800055c:	480f      	ldr	r0, [pc, #60]	; (800059c <BL_FetchCmd+0xcc>)
 800055e:	f7ff fdf5 	bl	800014c <CBL_GET_Version>
 8000562:	e015      	b.n	8000590 <BL_FetchCmd+0xc0>
			case CBL_GET_HELP_CMD :CBL_GET_Help(Host_Buffer);break;
 8000564:	480d      	ldr	r0, [pc, #52]	; (800059c <BL_FetchCmd+0xcc>)
 8000566:	f7ff fe27 	bl	80001b8 <CBL_GET_Help>
 800056a:	e011      	b.n	8000590 <BL_FetchCmd+0xc0>
			case CBL_GET_CID_CMD :CBL_GET_Chip_Identification_Number(Host_Buffer);break;
 800056c:	480b      	ldr	r0, [pc, #44]	; (800059c <BL_FetchCmd+0xcc>)
 800056e:	f7ff fe5f 	bl	8000230 <CBL_GET_Chip_Identification_Number>
 8000572:	e00d      	b.n	8000590 <BL_FetchCmd+0xc0>
			case CBL_GO_TO_ADDR_CMD :bootloader_jump_to_user_app(Host_Buffer);break;
 8000574:	4809      	ldr	r0, [pc, #36]	; (800059c <BL_FetchCmd+0xcc>)
 8000576:	f7ff ff59 	bl	800042c <bootloader_jump_to_user_app>
 800057a:	e009      	b.n	8000590 <BL_FetchCmd+0xc0>
			case CBL_FLASH_ERASE_CMD :CBL_Flash_Erase(Host_Buffer);break;
 800057c:	4807      	ldr	r0, [pc, #28]	; (800059c <BL_FetchCmd+0xcc>)
 800057e:	f7ff fe93 	bl	80002a8 <CBL_Flash_Erase>
 8000582:	e005      	b.n	8000590 <BL_FetchCmd+0xc0>
			case CBL_MEM_WRITE_CMD :CBL_Write_Data(Host_Buffer);break;
 8000584:	4805      	ldr	r0, [pc, #20]	; (800059c <BL_FetchCmd+0xcc>)
 8000586:	f7ff fecf 	bl	8000328 <CBL_Write_Data>
 800058a:	e001      	b.n	8000590 <BL_FetchCmd+0xc0>
			default : status = BL_NACK ;
 800058c:	2300      	movs	r3, #0
 800058e:	71fb      	strb	r3, [r7, #7]
			}

		}
	}
	return status;
 8000590:	79fb      	ldrb	r3, [r7, #7]
}
 8000592:	4618      	mov	r0, r3
 8000594:	3708      	adds	r7, #8
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	2000002c 	.word	0x2000002c
 80005a0:	200000fc 	.word	0x200000fc
 80005a4:	2000002d 	.word	0x2000002d

080005a8 <BL_Send_ACK>:




static void BL_Send_ACK(uint8_t Data_len)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	4603      	mov	r3, r0
 80005b0:	71fb      	strb	r3, [r7, #7]
	uint8_t ACK_Value[2]= {0};
 80005b2:	2300      	movs	r3, #0
 80005b4:	81bb      	strh	r3, [r7, #12]
	ACK_Value[0]=Send_ACK;
 80005b6:	23cd      	movs	r3, #205	; 0xcd
 80005b8:	733b      	strb	r3, [r7, #12]
	ACK_Value[1]=Data_len ;
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(&huart1,(uint8_t*)ACK_Value,2,HAL_MAX_DELAY);
 80005be:	f107 010c 	add.w	r1, r7, #12
 80005c2:	f04f 33ff 	mov.w	r3, #4294967295
 80005c6:	2202      	movs	r2, #2
 80005c8:	4803      	ldr	r0, [pc, #12]	; (80005d8 <BL_Send_ACK+0x30>)
 80005ca:	f001 fcc1 	bl	8001f50 <HAL_UART_Transmit>
}
 80005ce:	bf00      	nop
 80005d0:	3710      	adds	r7, #16
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	200000fc 	.word	0x200000fc

080005dc <BL_Send_NACK>:



static void BL_Send_NACK()
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
	uint8_t ACK_Value=Send_NACK;
 80005e2:	23ab      	movs	r3, #171	; 0xab
 80005e4:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1,&ACK_Value,sizeof(ACK_Value),HAL_MAX_DELAY);
 80005e6:	1df9      	adds	r1, r7, #7
 80005e8:	f04f 33ff 	mov.w	r3, #4294967295
 80005ec:	2201      	movs	r2, #1
 80005ee:	4803      	ldr	r0, [pc, #12]	; (80005fc <BL_Send_NACK+0x20>)
 80005f0:	f001 fcae 	bl	8001f50 <HAL_UART_Transmit>

}
 80005f4:	bf00      	nop
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	200000fc 	.word	0x200000fc

08000600 <BL_CRC_Verify>:
static uint32_t BL_CRC_Verify(uint8_t* Pdata, uint32_t DataLen, uint32_t HostCRC)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b088      	sub	sp, #32
 8000604:	af00      	add	r7, sp, #0
 8000606:	60f8      	str	r0, [r7, #12]
 8000608:	60b9      	str	r1, [r7, #8]
 800060a:	607a      	str	r2, [r7, #4]
	uint8_t CRC_Status = CRC_VERIFYING_FAILED ;
 800060c:	2300      	movs	r3, #0
 800060e:	77fb      	strb	r3, [r7, #31]
	uint32_t MCU_CRC = 0 ;
 8000610:	2300      	movs	r3, #0
 8000612:	61bb      	str	r3, [r7, #24]
	uint32_t DataBuffer=0 ;
 8000614:	2300      	movs	r3, #0
 8000616:	613b      	str	r3, [r7, #16]
	for(uint8_t count = 0; count<DataLen ; count++)
 8000618:	2300      	movs	r3, #0
 800061a:	75fb      	strb	r3, [r7, #23]
 800061c:	e00f      	b.n	800063e <BL_CRC_Verify+0x3e>
	{
		DataBuffer = (uint32_t)Pdata[count] ;
 800061e:	7dfb      	ldrb	r3, [r7, #23]
 8000620:	68fa      	ldr	r2, [r7, #12]
 8000622:	4413      	add	r3, r2
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	613b      	str	r3, [r7, #16]
		MCU_CRC = HAL_CRC_Accumulate(&hcrc,&DataBuffer,1) ;
 8000628:	f107 0310 	add.w	r3, r7, #16
 800062c:	2201      	movs	r2, #1
 800062e:	4619      	mov	r1, r3
 8000630:	4810      	ldr	r0, [pc, #64]	; (8000674 <BL_CRC_Verify+0x74>)
 8000632:	f000 fc7e 	bl	8000f32 <HAL_CRC_Accumulate>
 8000636:	61b8      	str	r0, [r7, #24]
	for(uint8_t count = 0; count<DataLen ; count++)
 8000638:	7dfb      	ldrb	r3, [r7, #23]
 800063a:	3301      	adds	r3, #1
 800063c:	75fb      	strb	r3, [r7, #23]
 800063e:	7dfb      	ldrb	r3, [r7, #23]
 8000640:	68ba      	ldr	r2, [r7, #8]
 8000642:	429a      	cmp	r2, r3
 8000644:	d8eb      	bhi.n	800061e <BL_CRC_Verify+0x1e>
	}
	__HAL_CRC_DR_RESET(&hcrc) ;
 8000646:	4b0b      	ldr	r3, [pc, #44]	; (8000674 <BL_CRC_Verify+0x74>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	689a      	ldr	r2, [r3, #8]
 800064c:	4b09      	ldr	r3, [pc, #36]	; (8000674 <BL_CRC_Verify+0x74>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f042 0201 	orr.w	r2, r2, #1
 8000654:	609a      	str	r2, [r3, #8]
	if(HostCRC == MCU_CRC)
 8000656:	687a      	ldr	r2, [r7, #4]
 8000658:	69bb      	ldr	r3, [r7, #24]
 800065a:	429a      	cmp	r2, r3
 800065c:	d102      	bne.n	8000664 <BL_CRC_Verify+0x64>
	{
		CRC_Status = CRC_VERIFYING_PASS ;
 800065e:	2301      	movs	r3, #1
 8000660:	77fb      	strb	r3, [r7, #31]
 8000662:	e001      	b.n	8000668 <BL_CRC_Verify+0x68>
	}
	else
	{
		CRC_Status = CRC_VERIFYING_FAILED ;
 8000664:	2300      	movs	r3, #0
 8000666:	77fb      	strb	r3, [r7, #31]
	}
	return CRC_Status;
 8000668:	7ffb      	ldrb	r3, [r7, #31]
}
 800066a:	4618      	mov	r0, r3
 800066c:	3720      	adds	r7, #32
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	200000f4 	.word	0x200000f4

08000678 <Perform_Flash_Erase>:
static uint8_t Perform_Flash_Erase(uint32_t Page_Address , uint8_t Page_Number)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	460b      	mov	r3, r1
 8000682:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef HAL_Status = HAL_ERROR ;
 8000684:	2301      	movs	r3, #1
 8000686:	77bb      	strb	r3, [r7, #30]
	FLASH_EraseInitTypeDef pEraseInit ;
	uint32_t PageError = 0;
 8000688:	2300      	movs	r3, #0
 800068a:	60bb      	str	r3, [r7, #8]
	uint8_t Page_Status = INVALID_PAGE_NUMBER ;
 800068c:	2300      	movs	r3, #0
 800068e:	77fb      	strb	r3, [r7, #31]
	if(Page_Number > CBL_FLASH_MAX_PAGE_NUMBER)
 8000690:	78fb      	ldrb	r3, [r7, #3]
 8000692:	2b10      	cmp	r3, #16
 8000694:	d902      	bls.n	800069c <Perform_Flash_Erase+0x24>
	{
		Page_Status = INVALID_PAGE_NUMBER ;
 8000696:	2300      	movs	r3, #0
 8000698:	77fb      	strb	r3, [r7, #31]
 800069a:	e035      	b.n	8000708 <Perform_Flash_Erase+0x90>
	}
	else
	{
		Page_Status = VALID_PAGE_NUMBER ;
 800069c:	2301      	movs	r3, #1
 800069e:	77fb      	strb	r3, [r7, #31]
		if(Page_Number <= (CBL_FLASH_MAX_PAGE_NUMBER-1) || Page_Address == CBL_FLASH_MASS_ERASE )
 80006a0:	78fb      	ldrb	r3, [r7, #3]
 80006a2:	2b0f      	cmp	r3, #15
 80006a4:	d902      	bls.n	80006ac <Perform_Flash_Erase+0x34>
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	2bff      	cmp	r3, #255	; 0xff
 80006aa:	d12b      	bne.n	8000704 <Perform_Flash_Erase+0x8c>
		{
			if(Page_Address == CBL_FLASH_MASS_ERASE)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	2bff      	cmp	r3, #255	; 0xff
 80006b0:	d108      	bne.n	80006c4 <Perform_Flash_Erase+0x4c>
			{
				pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES ;
 80006b2:	2300      	movs	r3, #0
 80006b4:	60fb      	str	r3, [r7, #12]
				pEraseInit.Banks = FLASH_BANK_1 ;
 80006b6:	2301      	movs	r3, #1
 80006b8:	613b      	str	r3, [r7, #16]
				pEraseInit.PageAddress = 0x8008000 ;
 80006ba:	4b16      	ldr	r3, [pc, #88]	; (8000714 <Perform_Flash_Erase+0x9c>)
 80006bc:	617b      	str	r3, [r7, #20]
				pEraseInit.NbPages = 12 ;
 80006be:	230c      	movs	r3, #12
 80006c0:	61bb      	str	r3, [r7, #24]
 80006c2:	e007      	b.n	80006d4 <Perform_Flash_Erase+0x5c>
			}
			else
			{
				pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES ;
 80006c4:	2300      	movs	r3, #0
 80006c6:	60fb      	str	r3, [r7, #12]
				pEraseInit.Banks = FLASH_BANK_1 ;
 80006c8:	2301      	movs	r3, #1
 80006ca:	613b      	str	r3, [r7, #16]
				pEraseInit.PageAddress = Page_Address ;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	617b      	str	r3, [r7, #20]
				pEraseInit.NbPages = Page_Number ;
 80006d0:	78fb      	ldrb	r3, [r7, #3]
 80006d2:	61bb      	str	r3, [r7, #24]
			}
			HAL_FLASH_Unlock();
 80006d4:	f000 fcc8 	bl	8001068 <HAL_FLASH_Unlock>
			HAL_Status = HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 80006d8:	f107 0208 	add.w	r2, r7, #8
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	4611      	mov	r1, r2
 80006e2:	4618      	mov	r0, r3
 80006e4:	f000 fda8 	bl	8001238 <HAL_FLASHEx_Erase>
 80006e8:	4603      	mov	r3, r0
 80006ea:	77bb      	strb	r3, [r7, #30]
			HAL_FLASH_Lock();
 80006ec:	f000 fce2 	bl	80010b4 <HAL_FLASH_Lock>
			if(PageError == HAL_SUCCESSFUL_ERASE)
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006f6:	d102      	bne.n	80006fe <Perform_Flash_Erase+0x86>
			{
				Page_Status = SUCCESSFUL_ERASE ;
 80006f8:	2303      	movs	r3, #3
 80006fa:	77fb      	strb	r3, [r7, #31]
			if(PageError == HAL_SUCCESSFUL_ERASE)
 80006fc:	e004      	b.n	8000708 <Perform_Flash_Erase+0x90>
			}
			else
			{
				Page_Status = UNSUCCESSFUL_ERASE ;
 80006fe:	2302      	movs	r3, #2
 8000700:	77fb      	strb	r3, [r7, #31]
			if(PageError == HAL_SUCCESSFUL_ERASE)
 8000702:	e001      	b.n	8000708 <Perform_Flash_Erase+0x90>
			}

		}
		else
		{
			Page_Status = INVALID_PAGE_NUMBER ;
 8000704:	2300      	movs	r3, #0
 8000706:	77fb      	strb	r3, [r7, #31]
		}
	}
	return Page_Status ;
 8000708:	7ffb      	ldrb	r3, [r7, #31]
}
 800070a:	4618      	mov	r0, r3
 800070c:	3720      	adds	r7, #32
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	08008000 	.word	0x08008000

08000718 <FlashMemory_Write>:

static uint8_t FlashMemory_Write(uint16_t *Pdata , uint32_t Start_Address , uint8_t Payload_Len)
{
 8000718:	b5b0      	push	{r4, r5, r7, lr}
 800071a:	b088      	sub	sp, #32
 800071c:	af00      	add	r7, sp, #0
 800071e:	60f8      	str	r0, [r7, #12]
 8000720:	60b9      	str	r1, [r7, #8]
 8000722:	4613      	mov	r3, r2
 8000724:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef HAL_Status = HAL_ERROR ;
 8000726:	2301      	movs	r3, #1
 8000728:	773b      	strb	r3, [r7, #28]
	uint32_t address = 0 ;
 800072a:	2300      	movs	r3, #0
 800072c:	61bb      	str	r3, [r7, #24]
	uint8_t Update_Address = 0 ;
 800072e:	2300      	movs	r3, #0
 8000730:	75fb      	strb	r3, [r7, #23]
	uint8_t Payload_Status = FLASH_PAYLOAD_WRITE_FAILED ;
 8000732:	2300      	movs	r3, #0
 8000734:	77fb      	strb	r3, [r7, #31]
	HAL_FLASH_Unlock();
 8000736:	f000 fc97 	bl	8001068 <HAL_FLASH_Unlock>

	for(uint8_t payload_count = 0,Update_Address = 0 ; payload_count< Payload_Len/2 ; payload_count++,Update_Address+=2)
 800073a:	2300      	movs	r3, #0
 800073c:	77bb      	strb	r3, [r7, #30]
 800073e:	2300      	movs	r3, #0
 8000740:	777b      	strb	r3, [r7, #29]
 8000742:	e022      	b.n	800078a <FlashMemory_Write+0x72>
	{
		address = Start_Address + Update_Address ;
 8000744:	7f7b      	ldrb	r3, [r7, #29]
 8000746:	68ba      	ldr	r2, [r7, #8]
 8000748:	4413      	add	r3, r2
 800074a:	61bb      	str	r3, [r7, #24]
		HAL_Status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, Pdata[payload_count]);
 800074c:	7fbb      	ldrb	r3, [r7, #30]
 800074e:	005b      	lsls	r3, r3, #1
 8000750:	68fa      	ldr	r2, [r7, #12]
 8000752:	4413      	add	r3, r2
 8000754:	881b      	ldrh	r3, [r3, #0]
 8000756:	b29b      	uxth	r3, r3
 8000758:	2200      	movs	r2, #0
 800075a:	461c      	mov	r4, r3
 800075c:	4615      	mov	r5, r2
 800075e:	4622      	mov	r2, r4
 8000760:	462b      	mov	r3, r5
 8000762:	69b9      	ldr	r1, [r7, #24]
 8000764:	2001      	movs	r0, #1
 8000766:	f000 fc0f 	bl	8000f88 <HAL_FLASH_Program>
 800076a:	4603      	mov	r3, r0
 800076c:	773b      	strb	r3, [r7, #28]
		if(HAL_Status != HAL_OK)
 800076e:	7f3b      	ldrb	r3, [r7, #28]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d002      	beq.n	800077a <FlashMemory_Write+0x62>
		{
			Payload_Status = FLASH_PAYLOAD_WRITE_FAILED ;
 8000774:	2300      	movs	r3, #0
 8000776:	77fb      	strb	r3, [r7, #31]
 8000778:	e001      	b.n	800077e <FlashMemory_Write+0x66>
		}
		else
		{
			Payload_Status = FLASH_PAYLOAD_WRITE_PASSED ;
 800077a:	2301      	movs	r3, #1
 800077c:	77fb      	strb	r3, [r7, #31]
	for(uint8_t payload_count = 0,Update_Address = 0 ; payload_count< Payload_Len/2 ; payload_count++,Update_Address+=2)
 800077e:	7fbb      	ldrb	r3, [r7, #30]
 8000780:	3301      	adds	r3, #1
 8000782:	77bb      	strb	r3, [r7, #30]
 8000784:	7f7b      	ldrb	r3, [r7, #29]
 8000786:	3302      	adds	r3, #2
 8000788:	777b      	strb	r3, [r7, #29]
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	b2db      	uxtb	r3, r3
 8000790:	7fba      	ldrb	r2, [r7, #30]
 8000792:	429a      	cmp	r2, r3
 8000794:	d3d6      	bcc.n	8000744 <FlashMemory_Write+0x2c>
		}
	}
	//HAL_FLASH_Lock();
	return Payload_Status ;
 8000796:	7ffb      	ldrb	r3, [r7, #31]
}
 8000798:	4618      	mov	r0, r3
 800079a:	3720      	adds	r7, #32
 800079c:	46bd      	mov	sp, r7
 800079e:	bdb0      	pop	{r4, r5, r7, pc}

080007a0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <MX_CRC_Init+0x20>)
 80007a6:	4a07      	ldr	r2, [pc, #28]	; (80007c4 <MX_CRC_Init+0x24>)
 80007a8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80007aa:	4805      	ldr	r0, [pc, #20]	; (80007c0 <MX_CRC_Init+0x20>)
 80007ac:	f000 fba5 	bl	8000efa <HAL_CRC_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80007b6:	f000 f8a1 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	200000f4 	.word	0x200000f4
 80007c4:	40023000 	.word	0x40023000

080007c8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b085      	sub	sp, #20
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a09      	ldr	r2, [pc, #36]	; (80007fc <HAL_CRC_MspInit+0x34>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d10b      	bne.n	80007f2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <HAL_CRC_MspInit+0x38>)
 80007dc:	695b      	ldr	r3, [r3, #20]
 80007de:	4a08      	ldr	r2, [pc, #32]	; (8000800 <HAL_CRC_MspInit+0x38>)
 80007e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007e4:	6153      	str	r3, [r2, #20]
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <HAL_CRC_MspInit+0x38>)
 80007e8:	695b      	ldr	r3, [r3, #20]
 80007ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80007f2:	bf00      	nop
 80007f4:	3714      	adds	r7, #20
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr
 80007fc:	40023000 	.word	0x40023000
 8000800:	40021000 	.word	0x40021000

08000804 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000804:	b480      	push	{r7}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800080a:	4b14      	ldr	r3, [pc, #80]	; (800085c <MX_GPIO_Init+0x58>)
 800080c:	699b      	ldr	r3, [r3, #24]
 800080e:	4a13      	ldr	r2, [pc, #76]	; (800085c <MX_GPIO_Init+0x58>)
 8000810:	f043 0320 	orr.w	r3, r3, #32
 8000814:	6193      	str	r3, [r2, #24]
 8000816:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_GPIO_Init+0x58>)
 8000818:	699b      	ldr	r3, [r3, #24]
 800081a:	f003 0320 	and.w	r3, r3, #32
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <MX_GPIO_Init+0x58>)
 8000824:	699b      	ldr	r3, [r3, #24]
 8000826:	4a0d      	ldr	r2, [pc, #52]	; (800085c <MX_GPIO_Init+0x58>)
 8000828:	f043 0304 	orr.w	r3, r3, #4
 800082c:	6193      	str	r3, [r2, #24]
 800082e:	4b0b      	ldr	r3, [pc, #44]	; (800085c <MX_GPIO_Init+0x58>)
 8000830:	699b      	ldr	r3, [r3, #24]
 8000832:	f003 0304 	and.w	r3, r3, #4
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083a:	4b08      	ldr	r3, [pc, #32]	; (800085c <MX_GPIO_Init+0x58>)
 800083c:	699b      	ldr	r3, [r3, #24]
 800083e:	4a07      	ldr	r2, [pc, #28]	; (800085c <MX_GPIO_Init+0x58>)
 8000840:	f043 0308 	orr.w	r3, r3, #8
 8000844:	6193      	str	r3, [r2, #24]
 8000846:	4b05      	ldr	r3, [pc, #20]	; (800085c <MX_GPIO_Init+0x58>)
 8000848:	699b      	ldr	r3, [r3, #24]
 800084a:	f003 0308 	and.w	r3, r3, #8
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]

}
 8000852:	bf00      	nop
 8000854:	3714      	adds	r7, #20
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr
 800085c:	40021000 	.word	0x40021000

08000860 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000864:	f000 fa04 	bl	8000c70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000868:	f000 f80d 	bl	8000886 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800086c:	f7ff ffca 	bl	8000804 <MX_GPIO_Init>
  MX_CRC_Init();
 8000870:	f7ff ff96 	bl	80007a0 <MX_CRC_Init>
  MX_USART2_UART_Init();
 8000874:	f000 f8c2 	bl	80009fc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000878:	f000 f8ea 	bl	8000a50 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 800087c:	f000 f894 	bl	80009a8 <MX_USART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  BL_FetchCmd();
 8000880:	f7ff fe26 	bl	80004d0 <BL_FetchCmd>
 8000884:	e7fc      	b.n	8000880 <main+0x20>

08000886 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	b090      	sub	sp, #64	; 0x40
 800088a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088c:	f107 0318 	add.w	r3, r7, #24
 8000890:	2228      	movs	r2, #40	; 0x28
 8000892:	2100      	movs	r1, #0
 8000894:	4618      	mov	r0, r3
 8000896:	f001 fd6d 	bl	8002374 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800089a:	1d3b      	adds	r3, r7, #4
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008a8:	2302      	movs	r3, #2
 80008aa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008ac:	2301      	movs	r3, #1
 80008ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008b0:	2310      	movs	r3, #16
 80008b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008b4:	2300      	movs	r3, #0
 80008b6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b8:	f107 0318 	add.w	r3, r7, #24
 80008bc:	4618      	mov	r0, r3
 80008be:	f000 fee7 	bl	8001690 <HAL_RCC_OscConfig>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <SystemClock_Config+0x46>
  {
    Error_Handler();
 80008c8:	f000 f818 	bl	80008fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008cc:	230f      	movs	r3, #15
 80008ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008d0:	2300      	movs	r3, #0
 80008d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d4:	2300      	movs	r3, #0
 80008d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008d8:	2300      	movs	r3, #0
 80008da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008dc:	2300      	movs	r3, #0
 80008de:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008e0:	1d3b      	adds	r3, r7, #4
 80008e2:	2100      	movs	r1, #0
 80008e4:	4618      	mov	r0, r3
 80008e6:	f001 f955 	bl	8001b94 <HAL_RCC_ClockConfig>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80008f0:	f000 f804 	bl	80008fc <Error_Handler>
  }
}
 80008f4:	bf00      	nop
 80008f6:	3740      	adds	r7, #64	; 0x40
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}

080008fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000900:	b672      	cpsid	i
}
 8000902:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000904:	e7fe      	b.n	8000904 <Error_Handler+0x8>
	...

08000908 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <HAL_MspInit+0x40>)
 8000910:	699b      	ldr	r3, [r3, #24]
 8000912:	4a0d      	ldr	r2, [pc, #52]	; (8000948 <HAL_MspInit+0x40>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	6193      	str	r3, [r2, #24]
 800091a:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <HAL_MspInit+0x40>)
 800091c:	699b      	ldr	r3, [r3, #24]
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000926:	4b08      	ldr	r3, [pc, #32]	; (8000948 <HAL_MspInit+0x40>)
 8000928:	69db      	ldr	r3, [r3, #28]
 800092a:	4a07      	ldr	r2, [pc, #28]	; (8000948 <HAL_MspInit+0x40>)
 800092c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000930:	61d3      	str	r3, [r2, #28]
 8000932:	4b05      	ldr	r3, [pc, #20]	; (8000948 <HAL_MspInit+0x40>)
 8000934:	69db      	ldr	r3, [r3, #28]
 8000936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800093a:	603b      	str	r3, [r7, #0]
 800093c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093e:	bf00      	nop
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	bc80      	pop	{r7}
 8000946:	4770      	bx	lr
 8000948:	40021000 	.word	0x40021000

0800094c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <NMI_Handler+0x4>

08000952 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000956:	e7fe      	b.n	8000956 <HardFault_Handler+0x4>

08000958 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800095c:	e7fe      	b.n	800095c <MemManage_Handler+0x4>

0800095e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000962:	e7fe      	b.n	8000962 <BusFault_Handler+0x4>

08000964 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000968:	e7fe      	b.n	8000968 <UsageFault_Handler+0x4>

0800096a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	46bd      	mov	sp, r7
 8000972:	bc80      	pop	{r7}
 8000974:	4770      	bx	lr

08000976 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	46bd      	mov	sp, r7
 800097e:	bc80      	pop	{r7}
 8000980:	4770      	bx	lr

08000982 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	46bd      	mov	sp, r7
 800098a:	bc80      	pop	{r7}
 800098c:	4770      	bx	lr

0800098e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800098e:	b580      	push	{r7, lr}
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000992:	f000 f9b3 	bl	8000cfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}

0800099a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800099e:	bf00      	nop
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bc80      	pop	{r7}
 80009a4:	4770      	bx	lr
	...

080009a8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009ac:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <MX_USART1_UART_Init+0x4c>)
 80009ae:	4a12      	ldr	r2, [pc, #72]	; (80009f8 <MX_USART1_UART_Init+0x50>)
 80009b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009b2:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <MX_USART1_UART_Init+0x4c>)
 80009b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009ba:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <MX_USART1_UART_Init+0x4c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009c0:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <MX_USART1_UART_Init+0x4c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009c6:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <MX_USART1_UART_Init+0x4c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009cc:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <MX_USART1_UART_Init+0x4c>)
 80009ce:	220c      	movs	r2, #12
 80009d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d2:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <MX_USART1_UART_Init+0x4c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <MX_USART1_UART_Init+0x4c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009de:	4805      	ldr	r0, [pc, #20]	; (80009f4 <MX_USART1_UART_Init+0x4c>)
 80009e0:	f001 fa66 	bl	8001eb0 <HAL_UART_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009ea:	f7ff ff87 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	200000fc 	.word	0x200000fc
 80009f8:	40013800 	.word	0x40013800

080009fc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a00:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <MX_USART2_UART_Init+0x4c>)
 8000a02:	4a12      	ldr	r2, [pc, #72]	; (8000a4c <MX_USART2_UART_Init+0x50>)
 8000a04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a06:	4b10      	ldr	r3, [pc, #64]	; (8000a48 <MX_USART2_UART_Init+0x4c>)
 8000a08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <MX_USART2_UART_Init+0x4c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a14:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <MX_USART2_UART_Init+0x4c>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <MX_USART2_UART_Init+0x4c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a20:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <MX_USART2_UART_Init+0x4c>)
 8000a22:	220c      	movs	r2, #12
 8000a24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a26:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <MX_USART2_UART_Init+0x4c>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <MX_USART2_UART_Init+0x4c>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a32:	4805      	ldr	r0, [pc, #20]	; (8000a48 <MX_USART2_UART_Init+0x4c>)
 8000a34:	f001 fa3c 	bl	8001eb0 <HAL_UART_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a3e:	f7ff ff5d 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20000144 	.word	0x20000144
 8000a4c:	40004400 	.word	0x40004400

08000a50 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a54:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <MX_USART3_UART_Init+0x4c>)
 8000a56:	4a12      	ldr	r2, [pc, #72]	; (8000aa0 <MX_USART3_UART_Init+0x50>)
 8000a58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a5a:	4b10      	ldr	r3, [pc, #64]	; (8000a9c <MX_USART3_UART_Init+0x4c>)
 8000a5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <MX_USART3_UART_Init+0x4c>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a68:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <MX_USART3_UART_Init+0x4c>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <MX_USART3_UART_Init+0x4c>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a74:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <MX_USART3_UART_Init+0x4c>)
 8000a76:	220c      	movs	r2, #12
 8000a78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a7a:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <MX_USART3_UART_Init+0x4c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <MX_USART3_UART_Init+0x4c>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a86:	4805      	ldr	r0, [pc, #20]	; (8000a9c <MX_USART3_UART_Init+0x4c>)
 8000a88:	f001 fa12 	bl	8001eb0 <HAL_UART_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000a92:	f7ff ff33 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	2000018c 	.word	0x2000018c
 8000aa0:	40004800 	.word	0x40004800

08000aa4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08c      	sub	sp, #48	; 0x30
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aac:	f107 0320 	add.w	r3, r7, #32
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a53      	ldr	r2, [pc, #332]	; (8000c0c <HAL_UART_MspInit+0x168>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d132      	bne.n	8000b2a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ac4:	4b52      	ldr	r3, [pc, #328]	; (8000c10 <HAL_UART_MspInit+0x16c>)
 8000ac6:	699b      	ldr	r3, [r3, #24]
 8000ac8:	4a51      	ldr	r2, [pc, #324]	; (8000c10 <HAL_UART_MspInit+0x16c>)
 8000aca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ace:	6193      	str	r3, [r2, #24]
 8000ad0:	4b4f      	ldr	r3, [pc, #316]	; (8000c10 <HAL_UART_MspInit+0x16c>)
 8000ad2:	699b      	ldr	r3, [r3, #24]
 8000ad4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ad8:	61fb      	str	r3, [r7, #28]
 8000ada:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000adc:	4b4c      	ldr	r3, [pc, #304]	; (8000c10 <HAL_UART_MspInit+0x16c>)
 8000ade:	699b      	ldr	r3, [r3, #24]
 8000ae0:	4a4b      	ldr	r2, [pc, #300]	; (8000c10 <HAL_UART_MspInit+0x16c>)
 8000ae2:	f043 0304 	orr.w	r3, r3, #4
 8000ae6:	6193      	str	r3, [r2, #24]
 8000ae8:	4b49      	ldr	r3, [pc, #292]	; (8000c10 <HAL_UART_MspInit+0x16c>)
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	f003 0304 	and.w	r3, r3, #4
 8000af0:	61bb      	str	r3, [r7, #24]
 8000af2:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000af4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afa:	2302      	movs	r3, #2
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000afe:	2303      	movs	r3, #3
 8000b00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b02:	f107 0320 	add.w	r3, r7, #32
 8000b06:	4619      	mov	r1, r3
 8000b08:	4842      	ldr	r0, [pc, #264]	; (8000c14 <HAL_UART_MspInit+0x170>)
 8000b0a:	f000 fc3d 	bl	8001388 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b14:	2300      	movs	r3, #0
 8000b16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1c:	f107 0320 	add.w	r3, r7, #32
 8000b20:	4619      	mov	r1, r3
 8000b22:	483c      	ldr	r0, [pc, #240]	; (8000c14 <HAL_UART_MspInit+0x170>)
 8000b24:	f000 fc30 	bl	8001388 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000b28:	e06c      	b.n	8000c04 <HAL_UART_MspInit+0x160>
  else if(uartHandle->Instance==USART2)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a3a      	ldr	r2, [pc, #232]	; (8000c18 <HAL_UART_MspInit+0x174>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d130      	bne.n	8000b96 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b34:	4b36      	ldr	r3, [pc, #216]	; (8000c10 <HAL_UART_MspInit+0x16c>)
 8000b36:	69db      	ldr	r3, [r3, #28]
 8000b38:	4a35      	ldr	r2, [pc, #212]	; (8000c10 <HAL_UART_MspInit+0x16c>)
 8000b3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b3e:	61d3      	str	r3, [r2, #28]
 8000b40:	4b33      	ldr	r3, [pc, #204]	; (8000c10 <HAL_UART_MspInit+0x16c>)
 8000b42:	69db      	ldr	r3, [r3, #28]
 8000b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b48:	617b      	str	r3, [r7, #20]
 8000b4a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4c:	4b30      	ldr	r3, [pc, #192]	; (8000c10 <HAL_UART_MspInit+0x16c>)
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	4a2f      	ldr	r2, [pc, #188]	; (8000c10 <HAL_UART_MspInit+0x16c>)
 8000b52:	f043 0304 	orr.w	r3, r3, #4
 8000b56:	6193      	str	r3, [r2, #24]
 8000b58:	4b2d      	ldr	r3, [pc, #180]	; (8000c10 <HAL_UART_MspInit+0x16c>)
 8000b5a:	699b      	ldr	r3, [r3, #24]
 8000b5c:	f003 0304 	and.w	r3, r3, #4
 8000b60:	613b      	str	r3, [r7, #16]
 8000b62:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b64:	2304      	movs	r3, #4
 8000b66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b70:	f107 0320 	add.w	r3, r7, #32
 8000b74:	4619      	mov	r1, r3
 8000b76:	4827      	ldr	r0, [pc, #156]	; (8000c14 <HAL_UART_MspInit+0x170>)
 8000b78:	f000 fc06 	bl	8001388 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b7c:	2308      	movs	r3, #8
 8000b7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b80:	2300      	movs	r3, #0
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b88:	f107 0320 	add.w	r3, r7, #32
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4821      	ldr	r0, [pc, #132]	; (8000c14 <HAL_UART_MspInit+0x170>)
 8000b90:	f000 fbfa 	bl	8001388 <HAL_GPIO_Init>
}
 8000b94:	e036      	b.n	8000c04 <HAL_UART_MspInit+0x160>
  else if(uartHandle->Instance==USART3)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a20      	ldr	r2, [pc, #128]	; (8000c1c <HAL_UART_MspInit+0x178>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d131      	bne.n	8000c04 <HAL_UART_MspInit+0x160>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ba0:	4b1b      	ldr	r3, [pc, #108]	; (8000c10 <HAL_UART_MspInit+0x16c>)
 8000ba2:	69db      	ldr	r3, [r3, #28]
 8000ba4:	4a1a      	ldr	r2, [pc, #104]	; (8000c10 <HAL_UART_MspInit+0x16c>)
 8000ba6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000baa:	61d3      	str	r3, [r2, #28]
 8000bac:	4b18      	ldr	r3, [pc, #96]	; (8000c10 <HAL_UART_MspInit+0x16c>)
 8000bae:	69db      	ldr	r3, [r3, #28]
 8000bb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb8:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <HAL_UART_MspInit+0x16c>)
 8000bba:	699b      	ldr	r3, [r3, #24]
 8000bbc:	4a14      	ldr	r2, [pc, #80]	; (8000c10 <HAL_UART_MspInit+0x16c>)
 8000bbe:	f043 0308 	orr.w	r3, r3, #8
 8000bc2:	6193      	str	r3, [r2, #24]
 8000bc4:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <HAL_UART_MspInit+0x16c>)
 8000bc6:	699b      	ldr	r3, [r3, #24]
 8000bc8:	f003 0308 	and.w	r3, r3, #8
 8000bcc:	60bb      	str	r3, [r7, #8]
 8000bce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bde:	f107 0320 	add.w	r3, r7, #32
 8000be2:	4619      	mov	r1, r3
 8000be4:	480e      	ldr	r0, [pc, #56]	; (8000c20 <HAL_UART_MspInit+0x17c>)
 8000be6:	f000 fbcf 	bl	8001388 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000bea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000bee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf8:	f107 0320 	add.w	r3, r7, #32
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4808      	ldr	r0, [pc, #32]	; (8000c20 <HAL_UART_MspInit+0x17c>)
 8000c00:	f000 fbc2 	bl	8001388 <HAL_GPIO_Init>
}
 8000c04:	bf00      	nop
 8000c06:	3730      	adds	r7, #48	; 0x30
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40013800 	.word	0x40013800
 8000c10:	40021000 	.word	0x40021000
 8000c14:	40010800 	.word	0x40010800
 8000c18:	40004400 	.word	0x40004400
 8000c1c:	40004800 	.word	0x40004800
 8000c20:	40010c00 	.word	0x40010c00

08000c24 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c24:	f7ff feb9 	bl	800099a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c28:	480b      	ldr	r0, [pc, #44]	; (8000c58 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c2a:	490c      	ldr	r1, [pc, #48]	; (8000c5c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c2c:	4a0c      	ldr	r2, [pc, #48]	; (8000c60 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c30:	e002      	b.n	8000c38 <LoopCopyDataInit>

08000c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c36:	3304      	adds	r3, #4

08000c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c3c:	d3f9      	bcc.n	8000c32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c3e:	4a09      	ldr	r2, [pc, #36]	; (8000c64 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c40:	4c09      	ldr	r4, [pc, #36]	; (8000c68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c44:	e001      	b.n	8000c4a <LoopFillZerobss>

08000c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c48:	3204      	adds	r2, #4

08000c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c4c:	d3fb      	bcc.n	8000c46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c4e:	f001 fb99 	bl	8002384 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c52:	f7ff fe05 	bl	8000860 <main>
  bx lr
 8000c56:	4770      	bx	lr
  ldr r0, =_sdata
 8000c58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c5c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c60:	08002420 	.word	0x08002420
  ldr r2, =_sbss
 8000c64:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000c68:	200001f8 	.word	0x200001f8

08000c6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c6c:	e7fe      	b.n	8000c6c <ADC1_2_IRQHandler>
	...

08000c70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c74:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <HAL_Init+0x28>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a07      	ldr	r2, [pc, #28]	; (8000c98 <HAL_Init+0x28>)
 8000c7a:	f043 0310 	orr.w	r3, r3, #16
 8000c7e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c80:	2003      	movs	r0, #3
 8000c82:	f000 f907 	bl	8000e94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c86:	200f      	movs	r0, #15
 8000c88:	f000 f808 	bl	8000c9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c8c:	f7ff fe3c 	bl	8000908 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c90:	2300      	movs	r3, #0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40022000 	.word	0x40022000

08000c9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ca4:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <HAL_InitTick+0x54>)
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <HAL_InitTick+0x58>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	4619      	mov	r1, r3
 8000cae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f000 f911 	bl	8000ee2 <HAL_SYSTICK_Config>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e00e      	b.n	8000ce8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2b0f      	cmp	r3, #15
 8000cce:	d80a      	bhi.n	8000ce6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	6879      	ldr	r1, [r7, #4]
 8000cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd8:	f000 f8e7 	bl	8000eaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cdc:	4a06      	ldr	r2, [pc, #24]	; (8000cf8 <HAL_InitTick+0x5c>)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	e000      	b.n	8000ce8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20000000 	.word	0x20000000
 8000cf4:	20000008 	.word	0x20000008
 8000cf8:	20000004 	.word	0x20000004

08000cfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d00:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <HAL_IncTick+0x1c>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	461a      	mov	r2, r3
 8000d06:	4b05      	ldr	r3, [pc, #20]	; (8000d1c <HAL_IncTick+0x20>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	4a03      	ldr	r2, [pc, #12]	; (8000d1c <HAL_IncTick+0x20>)
 8000d0e:	6013      	str	r3, [r2, #0]
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bc80      	pop	{r7}
 8000d16:	4770      	bx	lr
 8000d18:	20000008 	.word	0x20000008
 8000d1c:	200001d4 	.word	0x200001d4

08000d20 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  return uwTick;
 8000d24:	4b02      	ldr	r3, [pc, #8]	; (8000d30 <HAL_GetTick+0x10>)
 8000d26:	681b      	ldr	r3, [r3, #0]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bc80      	pop	{r7}
 8000d2e:	4770      	bx	lr
 8000d30:	200001d4 	.word	0x200001d4

08000d34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f003 0307 	and.w	r3, r3, #7
 8000d42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d44:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <__NVIC_SetPriorityGrouping+0x44>)
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d4a:	68ba      	ldr	r2, [r7, #8]
 8000d4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d50:	4013      	ands	r3, r2
 8000d52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d66:	4a04      	ldr	r2, [pc, #16]	; (8000d78 <__NVIC_SetPriorityGrouping+0x44>)
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	60d3      	str	r3, [r2, #12]
}
 8000d6c:	bf00      	nop
 8000d6e:	3714      	adds	r7, #20
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bc80      	pop	{r7}
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d80:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <__NVIC_GetPriorityGrouping+0x18>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	0a1b      	lsrs	r3, r3, #8
 8000d86:	f003 0307 	and.w	r3, r3, #7
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bc80      	pop	{r7}
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	6039      	str	r1, [r7, #0]
 8000da2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	db0a      	blt.n	8000dc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	b2da      	uxtb	r2, r3
 8000db0:	490c      	ldr	r1, [pc, #48]	; (8000de4 <__NVIC_SetPriority+0x4c>)
 8000db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db6:	0112      	lsls	r2, r2, #4
 8000db8:	b2d2      	uxtb	r2, r2
 8000dba:	440b      	add	r3, r1
 8000dbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dc0:	e00a      	b.n	8000dd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	4908      	ldr	r1, [pc, #32]	; (8000de8 <__NVIC_SetPriority+0x50>)
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
 8000dca:	f003 030f 	and.w	r3, r3, #15
 8000dce:	3b04      	subs	r3, #4
 8000dd0:	0112      	lsls	r2, r2, #4
 8000dd2:	b2d2      	uxtb	r2, r2
 8000dd4:	440b      	add	r3, r1
 8000dd6:	761a      	strb	r2, [r3, #24]
}
 8000dd8:	bf00      	nop
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bc80      	pop	{r7}
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000e100 	.word	0xe000e100
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b089      	sub	sp, #36	; 0x24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	f003 0307 	and.w	r3, r3, #7
 8000dfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	f1c3 0307 	rsb	r3, r3, #7
 8000e06:	2b04      	cmp	r3, #4
 8000e08:	bf28      	it	cs
 8000e0a:	2304      	movcs	r3, #4
 8000e0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	3304      	adds	r3, #4
 8000e12:	2b06      	cmp	r3, #6
 8000e14:	d902      	bls.n	8000e1c <NVIC_EncodePriority+0x30>
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	3b03      	subs	r3, #3
 8000e1a:	e000      	b.n	8000e1e <NVIC_EncodePriority+0x32>
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e20:	f04f 32ff 	mov.w	r2, #4294967295
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	43da      	mvns	r2, r3
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	401a      	ands	r2, r3
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e34:	f04f 31ff 	mov.w	r1, #4294967295
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3e:	43d9      	mvns	r1, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e44:	4313      	orrs	r3, r2
         );
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3724      	adds	r7, #36	; 0x24
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr

08000e50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e60:	d301      	bcc.n	8000e66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e62:	2301      	movs	r3, #1
 8000e64:	e00f      	b.n	8000e86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e66:	4a0a      	ldr	r2, [pc, #40]	; (8000e90 <SysTick_Config+0x40>)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e6e:	210f      	movs	r1, #15
 8000e70:	f04f 30ff 	mov.w	r0, #4294967295
 8000e74:	f7ff ff90 	bl	8000d98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e78:	4b05      	ldr	r3, [pc, #20]	; (8000e90 <SysTick_Config+0x40>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e7e:	4b04      	ldr	r3, [pc, #16]	; (8000e90 <SysTick_Config+0x40>)
 8000e80:	2207      	movs	r2, #7
 8000e82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	e000e010 	.word	0xe000e010

08000e94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f7ff ff49 	bl	8000d34 <__NVIC_SetPriorityGrouping>
}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b086      	sub	sp, #24
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	60b9      	str	r1, [r7, #8]
 8000eb4:	607a      	str	r2, [r7, #4]
 8000eb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ebc:	f7ff ff5e 	bl	8000d7c <__NVIC_GetPriorityGrouping>
 8000ec0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	68b9      	ldr	r1, [r7, #8]
 8000ec6:	6978      	ldr	r0, [r7, #20]
 8000ec8:	f7ff ff90 	bl	8000dec <NVIC_EncodePriority>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ed2:	4611      	mov	r1, r2
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff ff5f 	bl	8000d98 <__NVIC_SetPriority>
}
 8000eda:	bf00      	nop
 8000edc:	3718      	adds	r7, #24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f7ff ffb0 	bl	8000e50 <SysTick_Config>
 8000ef0:	4603      	mov	r3, r0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b082      	sub	sp, #8
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d101      	bne.n	8000f0c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	e00e      	b.n	8000f2a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	795b      	ldrb	r3, [r3, #5]
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d105      	bne.n	8000f22 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f7ff fc53 	bl	80007c8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2201      	movs	r2, #1
 8000f26:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8000f32:	b480      	push	{r7}
 8000f34:	b087      	sub	sp, #28
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	60f8      	str	r0, [r7, #12]
 8000f3a:	60b9      	str	r1, [r7, #8]
 8000f3c:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8000f3e:	2300      	movs	r3, #0
 8000f40:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	2202      	movs	r2, #2
 8000f46:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]
 8000f4c:	e00a      	b.n	8000f64 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	68ba      	ldr	r2, [r7, #8]
 8000f54:	441a      	add	r2, r3
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	6812      	ldr	r2, [r2, #0]
 8000f5c:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	3301      	adds	r3, #1
 8000f62:	617b      	str	r3, [r7, #20]
 8000f64:	697a      	ldr	r2, [r7, #20]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d3f0      	bcc.n	8000f4e <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	2201      	movs	r2, #1
 8000f78:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8000f7a:	693b      	ldr	r3, [r7, #16]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	371c      	adds	r7, #28
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bc80      	pop	{r7}
 8000f84:	4770      	bx	lr
	...

08000f88 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f8a:	b087      	sub	sp, #28
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000fa2:	4b2f      	ldr	r3, [pc, #188]	; (8001060 <HAL_FLASH_Program+0xd8>)
 8000fa4:	7e1b      	ldrb	r3, [r3, #24]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d101      	bne.n	8000fae <HAL_FLASH_Program+0x26>
 8000faa:	2302      	movs	r3, #2
 8000fac:	e054      	b.n	8001058 <HAL_FLASH_Program+0xd0>
 8000fae:	4b2c      	ldr	r3, [pc, #176]	; (8001060 <HAL_FLASH_Program+0xd8>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000fb4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000fb8:	f000 f8a8 	bl	800110c <FLASH_WaitForLastOperation>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8000fc0:	7dfb      	ldrb	r3, [r7, #23]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d144      	bne.n	8001050 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d102      	bne.n	8000fd2 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	757b      	strb	r3, [r7, #21]
 8000fd0:	e007      	b.n	8000fe2 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d102      	bne.n	8000fde <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	757b      	strb	r3, [r7, #21]
 8000fdc:	e001      	b.n	8000fe2 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8000fde:	2304      	movs	r3, #4
 8000fe0:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	75bb      	strb	r3, [r7, #22]
 8000fe6:	e02d      	b.n	8001044 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000fe8:	7dbb      	ldrb	r3, [r7, #22]
 8000fea:	005a      	lsls	r2, r3, #1
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	eb02 0c03 	add.w	ip, r2, r3
 8000ff2:	7dbb      	ldrb	r3, [r7, #22]
 8000ff4:	0119      	lsls	r1, r3, #4
 8000ff6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ffa:	f1c1 0620 	rsb	r6, r1, #32
 8000ffe:	f1a1 0020 	sub.w	r0, r1, #32
 8001002:	fa22 f401 	lsr.w	r4, r2, r1
 8001006:	fa03 f606 	lsl.w	r6, r3, r6
 800100a:	4334      	orrs	r4, r6
 800100c:	fa23 f000 	lsr.w	r0, r3, r0
 8001010:	4304      	orrs	r4, r0
 8001012:	fa23 f501 	lsr.w	r5, r3, r1
 8001016:	b2a3      	uxth	r3, r4
 8001018:	4619      	mov	r1, r3
 800101a:	4660      	mov	r0, ip
 800101c:	f000 f85a 	bl	80010d4 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001020:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001024:	f000 f872 	bl	800110c <FLASH_WaitForLastOperation>
 8001028:	4603      	mov	r3, r0
 800102a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800102c:	4b0d      	ldr	r3, [pc, #52]	; (8001064 <HAL_FLASH_Program+0xdc>)
 800102e:	691b      	ldr	r3, [r3, #16]
 8001030:	4a0c      	ldr	r2, [pc, #48]	; (8001064 <HAL_FLASH_Program+0xdc>)
 8001032:	f023 0301 	bic.w	r3, r3, #1
 8001036:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8001038:	7dfb      	ldrb	r3, [r7, #23]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d107      	bne.n	800104e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800103e:	7dbb      	ldrb	r3, [r7, #22]
 8001040:	3301      	adds	r3, #1
 8001042:	75bb      	strb	r3, [r7, #22]
 8001044:	7dba      	ldrb	r2, [r7, #22]
 8001046:	7d7b      	ldrb	r3, [r7, #21]
 8001048:	429a      	cmp	r2, r3
 800104a:	d3cd      	bcc.n	8000fe8 <HAL_FLASH_Program+0x60>
 800104c:	e000      	b.n	8001050 <HAL_FLASH_Program+0xc8>
      {
        break;
 800104e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001050:	4b03      	ldr	r3, [pc, #12]	; (8001060 <HAL_FLASH_Program+0xd8>)
 8001052:	2200      	movs	r2, #0
 8001054:	761a      	strb	r2, [r3, #24]

  return status;
 8001056:	7dfb      	ldrb	r3, [r7, #23]
}
 8001058:	4618      	mov	r0, r3
 800105a:	371c      	adds	r7, #28
 800105c:	46bd      	mov	sp, r7
 800105e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001060:	200001d8 	.word	0x200001d8
 8001064:	40022000 	.word	0x40022000

08001068 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800106e:	2300      	movs	r3, #0
 8001070:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001072:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <HAL_FLASH_Unlock+0x40>)
 8001074:	691b      	ldr	r3, [r3, #16]
 8001076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800107a:	2b00      	cmp	r3, #0
 800107c:	d00d      	beq.n	800109a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800107e:	4b0a      	ldr	r3, [pc, #40]	; (80010a8 <HAL_FLASH_Unlock+0x40>)
 8001080:	4a0a      	ldr	r2, [pc, #40]	; (80010ac <HAL_FLASH_Unlock+0x44>)
 8001082:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001084:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <HAL_FLASH_Unlock+0x40>)
 8001086:	4a0a      	ldr	r2, [pc, #40]	; (80010b0 <HAL_FLASH_Unlock+0x48>)
 8001088:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800108a:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <HAL_FLASH_Unlock+0x40>)
 800108c:	691b      	ldr	r3, [r3, #16]
 800108e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800109a:	79fb      	ldrb	r3, [r7, #7]
}
 800109c:	4618      	mov	r0, r3
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bc80      	pop	{r7}
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	40022000 	.word	0x40022000
 80010ac:	45670123 	.word	0x45670123
 80010b0:	cdef89ab 	.word	0xcdef89ab

080010b4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80010b8:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <HAL_FLASH_Lock+0x1c>)
 80010ba:	691b      	ldr	r3, [r3, #16]
 80010bc:	4a04      	ldr	r2, [pc, #16]	; (80010d0 <HAL_FLASH_Lock+0x1c>)
 80010be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010c2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bc80      	pop	{r7}
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	40022000 	.word	0x40022000

080010d4 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	460b      	mov	r3, r1
 80010de:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80010e0:	4b08      	ldr	r3, [pc, #32]	; (8001104 <FLASH_Program_HalfWord+0x30>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80010e6:	4b08      	ldr	r3, [pc, #32]	; (8001108 <FLASH_Program_HalfWord+0x34>)
 80010e8:	691b      	ldr	r3, [r3, #16]
 80010ea:	4a07      	ldr	r2, [pc, #28]	; (8001108 <FLASH_Program_HalfWord+0x34>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	887a      	ldrh	r2, [r7, #2]
 80010f6:	801a      	strh	r2, [r3, #0]
}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bc80      	pop	{r7}
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	200001d8 	.word	0x200001d8
 8001108:	40022000 	.word	0x40022000

0800110c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8001114:	f7ff fe04 	bl	8000d20 <HAL_GetTick>
 8001118:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800111a:	e010      	b.n	800113e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001122:	d00c      	beq.n	800113e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d007      	beq.n	800113a <FLASH_WaitForLastOperation+0x2e>
 800112a:	f7ff fdf9 	bl	8000d20 <HAL_GetTick>
 800112e:	4602      	mov	r2, r0
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	429a      	cmp	r2, r3
 8001138:	d201      	bcs.n	800113e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	e025      	b.n	800118a <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800113e:	4b15      	ldr	r3, [pc, #84]	; (8001194 <FLASH_WaitForLastOperation+0x88>)
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	2b00      	cmp	r3, #0
 8001148:	d1e8      	bne.n	800111c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800114a:	4b12      	ldr	r3, [pc, #72]	; (8001194 <FLASH_WaitForLastOperation+0x88>)
 800114c:	68db      	ldr	r3, [r3, #12]
 800114e:	f003 0320 	and.w	r3, r3, #32
 8001152:	2b00      	cmp	r3, #0
 8001154:	d002      	beq.n	800115c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001156:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <FLASH_WaitForLastOperation+0x88>)
 8001158:	2220      	movs	r2, #32
 800115a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800115c:	4b0d      	ldr	r3, [pc, #52]	; (8001194 <FLASH_WaitForLastOperation+0x88>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	f003 0310 	and.w	r3, r3, #16
 8001164:	2b00      	cmp	r3, #0
 8001166:	d10b      	bne.n	8001180 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001168:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <FLASH_WaitForLastOperation+0x88>)
 800116a:	69db      	ldr	r3, [r3, #28]
 800116c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001170:	2b00      	cmp	r3, #0
 8001172:	d105      	bne.n	8001180 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001174:	4b07      	ldr	r3, [pc, #28]	; (8001194 <FLASH_WaitForLastOperation+0x88>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800117c:	2b00      	cmp	r3, #0
 800117e:	d003      	beq.n	8001188 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001180:	f000 f80a 	bl	8001198 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	e000      	b.n	800118a <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40022000 	.word	0x40022000

08001198 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800119e:	2300      	movs	r3, #0
 80011a0:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80011a2:	4b23      	ldr	r3, [pc, #140]	; (8001230 <FLASH_SetErrorCode+0x98>)
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	f003 0310 	and.w	r3, r3, #16
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d009      	beq.n	80011c2 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80011ae:	4b21      	ldr	r3, [pc, #132]	; (8001234 <FLASH_SetErrorCode+0x9c>)
 80011b0:	69db      	ldr	r3, [r3, #28]
 80011b2:	f043 0302 	orr.w	r3, r3, #2
 80011b6:	4a1f      	ldr	r2, [pc, #124]	; (8001234 <FLASH_SetErrorCode+0x9c>)
 80011b8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f043 0310 	orr.w	r3, r3, #16
 80011c0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80011c2:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <FLASH_SetErrorCode+0x98>)
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	f003 0304 	and.w	r3, r3, #4
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d009      	beq.n	80011e2 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80011ce:	4b19      	ldr	r3, [pc, #100]	; (8001234 <FLASH_SetErrorCode+0x9c>)
 80011d0:	69db      	ldr	r3, [r3, #28]
 80011d2:	f043 0301 	orr.w	r3, r3, #1
 80011d6:	4a17      	ldr	r2, [pc, #92]	; (8001234 <FLASH_SetErrorCode+0x9c>)
 80011d8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f043 0304 	orr.w	r3, r3, #4
 80011e0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80011e2:	4b13      	ldr	r3, [pc, #76]	; (8001230 <FLASH_SetErrorCode+0x98>)
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d00b      	beq.n	8001206 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80011ee:	4b11      	ldr	r3, [pc, #68]	; (8001234 <FLASH_SetErrorCode+0x9c>)
 80011f0:	69db      	ldr	r3, [r3, #28]
 80011f2:	f043 0304 	orr.w	r3, r3, #4
 80011f6:	4a0f      	ldr	r2, [pc, #60]	; (8001234 <FLASH_SetErrorCode+0x9c>)
 80011f8:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80011fa:	4b0d      	ldr	r3, [pc, #52]	; (8001230 <FLASH_SetErrorCode+0x98>)
 80011fc:	69db      	ldr	r3, [r3, #28]
 80011fe:	4a0c      	ldr	r2, [pc, #48]	; (8001230 <FLASH_SetErrorCode+0x98>)
 8001200:	f023 0301 	bic.w	r3, r3, #1
 8001204:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f240 1201 	movw	r2, #257	; 0x101
 800120c:	4293      	cmp	r3, r2
 800120e:	d106      	bne.n	800121e <FLASH_SetErrorCode+0x86>
 8001210:	4b07      	ldr	r3, [pc, #28]	; (8001230 <FLASH_SetErrorCode+0x98>)
 8001212:	69db      	ldr	r3, [r3, #28]
 8001214:	4a06      	ldr	r2, [pc, #24]	; (8001230 <FLASH_SetErrorCode+0x98>)
 8001216:	f023 0301 	bic.w	r3, r3, #1
 800121a:	61d3      	str	r3, [r2, #28]
}  
 800121c:	e002      	b.n	8001224 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800121e:	4a04      	ldr	r2, [pc, #16]	; (8001230 <FLASH_SetErrorCode+0x98>)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	60d3      	str	r3, [r2, #12]
}  
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	bc80      	pop	{r7}
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	40022000 	.word	0x40022000
 8001234:	200001d8 	.word	0x200001d8

08001238 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8001246:	2300      	movs	r3, #0
 8001248:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800124a:	4b2f      	ldr	r3, [pc, #188]	; (8001308 <HAL_FLASHEx_Erase+0xd0>)
 800124c:	7e1b      	ldrb	r3, [r3, #24]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d101      	bne.n	8001256 <HAL_FLASHEx_Erase+0x1e>
 8001252:	2302      	movs	r3, #2
 8001254:	e053      	b.n	80012fe <HAL_FLASHEx_Erase+0xc6>
 8001256:	4b2c      	ldr	r3, [pc, #176]	; (8001308 <HAL_FLASHEx_Erase+0xd0>)
 8001258:	2201      	movs	r2, #1
 800125a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2b02      	cmp	r3, #2
 8001262:	d116      	bne.n	8001292 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001264:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001268:	f7ff ff50 	bl	800110c <FLASH_WaitForLastOperation>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d141      	bne.n	80012f6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8001272:	2001      	movs	r0, #1
 8001274:	f000 f84c 	bl	8001310 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001278:	f24c 3050 	movw	r0, #50000	; 0xc350
 800127c:	f7ff ff46 	bl	800110c <FLASH_WaitForLastOperation>
 8001280:	4603      	mov	r3, r0
 8001282:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001284:	4b21      	ldr	r3, [pc, #132]	; (800130c <HAL_FLASHEx_Erase+0xd4>)
 8001286:	691b      	ldr	r3, [r3, #16]
 8001288:	4a20      	ldr	r2, [pc, #128]	; (800130c <HAL_FLASHEx_Erase+0xd4>)
 800128a:	f023 0304 	bic.w	r3, r3, #4
 800128e:	6113      	str	r3, [r2, #16]
 8001290:	e031      	b.n	80012f6 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001292:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001296:	f7ff ff39 	bl	800110c <FLASH_WaitForLastOperation>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d12a      	bne.n	80012f6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	f04f 32ff 	mov.w	r2, #4294967295
 80012a6:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	60bb      	str	r3, [r7, #8]
 80012ae:	e019      	b.n	80012e4 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80012b0:	68b8      	ldr	r0, [r7, #8]
 80012b2:	f000 f849 	bl	8001348 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80012b6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80012ba:	f7ff ff27 	bl	800110c <FLASH_WaitForLastOperation>
 80012be:	4603      	mov	r3, r0
 80012c0:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80012c2:	4b12      	ldr	r3, [pc, #72]	; (800130c <HAL_FLASHEx_Erase+0xd4>)
 80012c4:	691b      	ldr	r3, [r3, #16]
 80012c6:	4a11      	ldr	r2, [pc, #68]	; (800130c <HAL_FLASHEx_Erase+0xd4>)
 80012c8:	f023 0302 	bic.w	r3, r3, #2
 80012cc:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80012ce:	7bfb      	ldrb	r3, [r7, #15]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d003      	beq.n	80012dc <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	68ba      	ldr	r2, [r7, #8]
 80012d8:	601a      	str	r2, [r3, #0]
            break;
 80012da:	e00c      	b.n	80012f6 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80012e2:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	029a      	lsls	r2, r3, #10
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	4413      	add	r3, r2
 80012f0:	68ba      	ldr	r2, [r7, #8]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d3dc      	bcc.n	80012b0 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80012f6:	4b04      	ldr	r3, [pc, #16]	; (8001308 <HAL_FLASHEx_Erase+0xd0>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	761a      	strb	r2, [r3, #24]

  return status;
 80012fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	200001d8 	.word	0x200001d8
 800130c:	40022000 	.word	0x40022000

08001310 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001318:	4b09      	ldr	r3, [pc, #36]	; (8001340 <FLASH_MassErase+0x30>)
 800131a:	2200      	movs	r2, #0
 800131c:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800131e:	4b09      	ldr	r3, [pc, #36]	; (8001344 <FLASH_MassErase+0x34>)
 8001320:	691b      	ldr	r3, [r3, #16]
 8001322:	4a08      	ldr	r2, [pc, #32]	; (8001344 <FLASH_MassErase+0x34>)
 8001324:	f043 0304 	orr.w	r3, r3, #4
 8001328:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800132a:	4b06      	ldr	r3, [pc, #24]	; (8001344 <FLASH_MassErase+0x34>)
 800132c:	691b      	ldr	r3, [r3, #16]
 800132e:	4a05      	ldr	r2, [pc, #20]	; (8001344 <FLASH_MassErase+0x34>)
 8001330:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001334:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	bc80      	pop	{r7}
 800133e:	4770      	bx	lr
 8001340:	200001d8 	.word	0x200001d8
 8001344:	40022000 	.word	0x40022000

08001348 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001350:	4b0b      	ldr	r3, [pc, #44]	; (8001380 <FLASH_PageErase+0x38>)
 8001352:	2200      	movs	r2, #0
 8001354:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001356:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <FLASH_PageErase+0x3c>)
 8001358:	691b      	ldr	r3, [r3, #16]
 800135a:	4a0a      	ldr	r2, [pc, #40]	; (8001384 <FLASH_PageErase+0x3c>)
 800135c:	f043 0302 	orr.w	r3, r3, #2
 8001360:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001362:	4a08      	ldr	r2, [pc, #32]	; (8001384 <FLASH_PageErase+0x3c>)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001368:	4b06      	ldr	r3, [pc, #24]	; (8001384 <FLASH_PageErase+0x3c>)
 800136a:	691b      	ldr	r3, [r3, #16]
 800136c:	4a05      	ldr	r2, [pc, #20]	; (8001384 <FLASH_PageErase+0x3c>)
 800136e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001372:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	bc80      	pop	{r7}
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	200001d8 	.word	0x200001d8
 8001384:	40022000 	.word	0x40022000

08001388 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001388:	b480      	push	{r7}
 800138a:	b08b      	sub	sp, #44	; 0x2c
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001392:	2300      	movs	r3, #0
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001396:	2300      	movs	r3, #0
 8001398:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800139a:	e169      	b.n	8001670 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800139c:	2201      	movs	r2, #1
 800139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	69fa      	ldr	r2, [r7, #28]
 80013ac:	4013      	ands	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	f040 8158 	bne.w	800166a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	4a9a      	ldr	r2, [pc, #616]	; (8001628 <HAL_GPIO_Init+0x2a0>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d05e      	beq.n	8001482 <HAL_GPIO_Init+0xfa>
 80013c4:	4a98      	ldr	r2, [pc, #608]	; (8001628 <HAL_GPIO_Init+0x2a0>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d875      	bhi.n	80014b6 <HAL_GPIO_Init+0x12e>
 80013ca:	4a98      	ldr	r2, [pc, #608]	; (800162c <HAL_GPIO_Init+0x2a4>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d058      	beq.n	8001482 <HAL_GPIO_Init+0xfa>
 80013d0:	4a96      	ldr	r2, [pc, #600]	; (800162c <HAL_GPIO_Init+0x2a4>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d86f      	bhi.n	80014b6 <HAL_GPIO_Init+0x12e>
 80013d6:	4a96      	ldr	r2, [pc, #600]	; (8001630 <HAL_GPIO_Init+0x2a8>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d052      	beq.n	8001482 <HAL_GPIO_Init+0xfa>
 80013dc:	4a94      	ldr	r2, [pc, #592]	; (8001630 <HAL_GPIO_Init+0x2a8>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d869      	bhi.n	80014b6 <HAL_GPIO_Init+0x12e>
 80013e2:	4a94      	ldr	r2, [pc, #592]	; (8001634 <HAL_GPIO_Init+0x2ac>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d04c      	beq.n	8001482 <HAL_GPIO_Init+0xfa>
 80013e8:	4a92      	ldr	r2, [pc, #584]	; (8001634 <HAL_GPIO_Init+0x2ac>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d863      	bhi.n	80014b6 <HAL_GPIO_Init+0x12e>
 80013ee:	4a92      	ldr	r2, [pc, #584]	; (8001638 <HAL_GPIO_Init+0x2b0>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d046      	beq.n	8001482 <HAL_GPIO_Init+0xfa>
 80013f4:	4a90      	ldr	r2, [pc, #576]	; (8001638 <HAL_GPIO_Init+0x2b0>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d85d      	bhi.n	80014b6 <HAL_GPIO_Init+0x12e>
 80013fa:	2b12      	cmp	r3, #18
 80013fc:	d82a      	bhi.n	8001454 <HAL_GPIO_Init+0xcc>
 80013fe:	2b12      	cmp	r3, #18
 8001400:	d859      	bhi.n	80014b6 <HAL_GPIO_Init+0x12e>
 8001402:	a201      	add	r2, pc, #4	; (adr r2, 8001408 <HAL_GPIO_Init+0x80>)
 8001404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001408:	08001483 	.word	0x08001483
 800140c:	0800145d 	.word	0x0800145d
 8001410:	0800146f 	.word	0x0800146f
 8001414:	080014b1 	.word	0x080014b1
 8001418:	080014b7 	.word	0x080014b7
 800141c:	080014b7 	.word	0x080014b7
 8001420:	080014b7 	.word	0x080014b7
 8001424:	080014b7 	.word	0x080014b7
 8001428:	080014b7 	.word	0x080014b7
 800142c:	080014b7 	.word	0x080014b7
 8001430:	080014b7 	.word	0x080014b7
 8001434:	080014b7 	.word	0x080014b7
 8001438:	080014b7 	.word	0x080014b7
 800143c:	080014b7 	.word	0x080014b7
 8001440:	080014b7 	.word	0x080014b7
 8001444:	080014b7 	.word	0x080014b7
 8001448:	080014b7 	.word	0x080014b7
 800144c:	08001465 	.word	0x08001465
 8001450:	08001479 	.word	0x08001479
 8001454:	4a79      	ldr	r2, [pc, #484]	; (800163c <HAL_GPIO_Init+0x2b4>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d013      	beq.n	8001482 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800145a:	e02c      	b.n	80014b6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	623b      	str	r3, [r7, #32]
          break;
 8001462:	e029      	b.n	80014b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	3304      	adds	r3, #4
 800146a:	623b      	str	r3, [r7, #32]
          break;
 800146c:	e024      	b.n	80014b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	3308      	adds	r3, #8
 8001474:	623b      	str	r3, [r7, #32]
          break;
 8001476:	e01f      	b.n	80014b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	330c      	adds	r3, #12
 800147e:	623b      	str	r3, [r7, #32]
          break;
 8001480:	e01a      	b.n	80014b8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d102      	bne.n	8001490 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800148a:	2304      	movs	r3, #4
 800148c:	623b      	str	r3, [r7, #32]
          break;
 800148e:	e013      	b.n	80014b8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d105      	bne.n	80014a4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001498:	2308      	movs	r3, #8
 800149a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	69fa      	ldr	r2, [r7, #28]
 80014a0:	611a      	str	r2, [r3, #16]
          break;
 80014a2:	e009      	b.n	80014b8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014a4:	2308      	movs	r3, #8
 80014a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	69fa      	ldr	r2, [r7, #28]
 80014ac:	615a      	str	r2, [r3, #20]
          break;
 80014ae:	e003      	b.n	80014b8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014b0:	2300      	movs	r3, #0
 80014b2:	623b      	str	r3, [r7, #32]
          break;
 80014b4:	e000      	b.n	80014b8 <HAL_GPIO_Init+0x130>
          break;
 80014b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	2bff      	cmp	r3, #255	; 0xff
 80014bc:	d801      	bhi.n	80014c2 <HAL_GPIO_Init+0x13a>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	e001      	b.n	80014c6 <HAL_GPIO_Init+0x13e>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	3304      	adds	r3, #4
 80014c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	2bff      	cmp	r3, #255	; 0xff
 80014cc:	d802      	bhi.n	80014d4 <HAL_GPIO_Init+0x14c>
 80014ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	e002      	b.n	80014da <HAL_GPIO_Init+0x152>
 80014d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d6:	3b08      	subs	r3, #8
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	210f      	movs	r1, #15
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	fa01 f303 	lsl.w	r3, r1, r3
 80014e8:	43db      	mvns	r3, r3
 80014ea:	401a      	ands	r2, r3
 80014ec:	6a39      	ldr	r1, [r7, #32]
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	fa01 f303 	lsl.w	r3, r1, r3
 80014f4:	431a      	orrs	r2, r3
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001502:	2b00      	cmp	r3, #0
 8001504:	f000 80b1 	beq.w	800166a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001508:	4b4d      	ldr	r3, [pc, #308]	; (8001640 <HAL_GPIO_Init+0x2b8>)
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	4a4c      	ldr	r2, [pc, #304]	; (8001640 <HAL_GPIO_Init+0x2b8>)
 800150e:	f043 0301 	orr.w	r3, r3, #1
 8001512:	6193      	str	r3, [r2, #24]
 8001514:	4b4a      	ldr	r3, [pc, #296]	; (8001640 <HAL_GPIO_Init+0x2b8>)
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	f003 0301 	and.w	r3, r3, #1
 800151c:	60bb      	str	r3, [r7, #8]
 800151e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001520:	4a48      	ldr	r2, [pc, #288]	; (8001644 <HAL_GPIO_Init+0x2bc>)
 8001522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001524:	089b      	lsrs	r3, r3, #2
 8001526:	3302      	adds	r3, #2
 8001528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800152c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800152e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001530:	f003 0303 	and.w	r3, r3, #3
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	220f      	movs	r2, #15
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	43db      	mvns	r3, r3
 800153e:	68fa      	ldr	r2, [r7, #12]
 8001540:	4013      	ands	r3, r2
 8001542:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	4a40      	ldr	r2, [pc, #256]	; (8001648 <HAL_GPIO_Init+0x2c0>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d013      	beq.n	8001574 <HAL_GPIO_Init+0x1ec>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4a3f      	ldr	r2, [pc, #252]	; (800164c <HAL_GPIO_Init+0x2c4>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d00d      	beq.n	8001570 <HAL_GPIO_Init+0x1e8>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	4a3e      	ldr	r2, [pc, #248]	; (8001650 <HAL_GPIO_Init+0x2c8>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d007      	beq.n	800156c <HAL_GPIO_Init+0x1e4>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	4a3d      	ldr	r2, [pc, #244]	; (8001654 <HAL_GPIO_Init+0x2cc>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d101      	bne.n	8001568 <HAL_GPIO_Init+0x1e0>
 8001564:	2303      	movs	r3, #3
 8001566:	e006      	b.n	8001576 <HAL_GPIO_Init+0x1ee>
 8001568:	2304      	movs	r3, #4
 800156a:	e004      	b.n	8001576 <HAL_GPIO_Init+0x1ee>
 800156c:	2302      	movs	r3, #2
 800156e:	e002      	b.n	8001576 <HAL_GPIO_Init+0x1ee>
 8001570:	2301      	movs	r3, #1
 8001572:	e000      	b.n	8001576 <HAL_GPIO_Init+0x1ee>
 8001574:	2300      	movs	r3, #0
 8001576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001578:	f002 0203 	and.w	r2, r2, #3
 800157c:	0092      	lsls	r2, r2, #2
 800157e:	4093      	lsls	r3, r2
 8001580:	68fa      	ldr	r2, [r7, #12]
 8001582:	4313      	orrs	r3, r2
 8001584:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001586:	492f      	ldr	r1, [pc, #188]	; (8001644 <HAL_GPIO_Init+0x2bc>)
 8001588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158a:	089b      	lsrs	r3, r3, #2
 800158c:	3302      	adds	r3, #2
 800158e:	68fa      	ldr	r2, [r7, #12]
 8001590:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d006      	beq.n	80015ae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015a0:	4b2d      	ldr	r3, [pc, #180]	; (8001658 <HAL_GPIO_Init+0x2d0>)
 80015a2:	689a      	ldr	r2, [r3, #8]
 80015a4:	492c      	ldr	r1, [pc, #176]	; (8001658 <HAL_GPIO_Init+0x2d0>)
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	608b      	str	r3, [r1, #8]
 80015ac:	e006      	b.n	80015bc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015ae:	4b2a      	ldr	r3, [pc, #168]	; (8001658 <HAL_GPIO_Init+0x2d0>)
 80015b0:	689a      	ldr	r2, [r3, #8]
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	43db      	mvns	r3, r3
 80015b6:	4928      	ldr	r1, [pc, #160]	; (8001658 <HAL_GPIO_Init+0x2d0>)
 80015b8:	4013      	ands	r3, r2
 80015ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d006      	beq.n	80015d6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015c8:	4b23      	ldr	r3, [pc, #140]	; (8001658 <HAL_GPIO_Init+0x2d0>)
 80015ca:	68da      	ldr	r2, [r3, #12]
 80015cc:	4922      	ldr	r1, [pc, #136]	; (8001658 <HAL_GPIO_Init+0x2d0>)
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	60cb      	str	r3, [r1, #12]
 80015d4:	e006      	b.n	80015e4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015d6:	4b20      	ldr	r3, [pc, #128]	; (8001658 <HAL_GPIO_Init+0x2d0>)
 80015d8:	68da      	ldr	r2, [r3, #12]
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	43db      	mvns	r3, r3
 80015de:	491e      	ldr	r1, [pc, #120]	; (8001658 <HAL_GPIO_Init+0x2d0>)
 80015e0:	4013      	ands	r3, r2
 80015e2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d006      	beq.n	80015fe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015f0:	4b19      	ldr	r3, [pc, #100]	; (8001658 <HAL_GPIO_Init+0x2d0>)
 80015f2:	685a      	ldr	r2, [r3, #4]
 80015f4:	4918      	ldr	r1, [pc, #96]	; (8001658 <HAL_GPIO_Init+0x2d0>)
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	604b      	str	r3, [r1, #4]
 80015fc:	e006      	b.n	800160c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015fe:	4b16      	ldr	r3, [pc, #88]	; (8001658 <HAL_GPIO_Init+0x2d0>)
 8001600:	685a      	ldr	r2, [r3, #4]
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	43db      	mvns	r3, r3
 8001606:	4914      	ldr	r1, [pc, #80]	; (8001658 <HAL_GPIO_Init+0x2d0>)
 8001608:	4013      	ands	r3, r2
 800160a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d021      	beq.n	800165c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001618:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <HAL_GPIO_Init+0x2d0>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	490e      	ldr	r1, [pc, #56]	; (8001658 <HAL_GPIO_Init+0x2d0>)
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	4313      	orrs	r3, r2
 8001622:	600b      	str	r3, [r1, #0]
 8001624:	e021      	b.n	800166a <HAL_GPIO_Init+0x2e2>
 8001626:	bf00      	nop
 8001628:	10320000 	.word	0x10320000
 800162c:	10310000 	.word	0x10310000
 8001630:	10220000 	.word	0x10220000
 8001634:	10210000 	.word	0x10210000
 8001638:	10120000 	.word	0x10120000
 800163c:	10110000 	.word	0x10110000
 8001640:	40021000 	.word	0x40021000
 8001644:	40010000 	.word	0x40010000
 8001648:	40010800 	.word	0x40010800
 800164c:	40010c00 	.word	0x40010c00
 8001650:	40011000 	.word	0x40011000
 8001654:	40011400 	.word	0x40011400
 8001658:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800165c:	4b0b      	ldr	r3, [pc, #44]	; (800168c <HAL_GPIO_Init+0x304>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	43db      	mvns	r3, r3
 8001664:	4909      	ldr	r1, [pc, #36]	; (800168c <HAL_GPIO_Init+0x304>)
 8001666:	4013      	ands	r3, r2
 8001668:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800166a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166c:	3301      	adds	r3, #1
 800166e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001676:	fa22 f303 	lsr.w	r3, r2, r3
 800167a:	2b00      	cmp	r3, #0
 800167c:	f47f ae8e 	bne.w	800139c <HAL_GPIO_Init+0x14>
  }
}
 8001680:	bf00      	nop
 8001682:	bf00      	nop
 8001684:	372c      	adds	r7, #44	; 0x2c
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr
 800168c:	40010400 	.word	0x40010400

08001690 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d101      	bne.n	80016a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e272      	b.n	8001b88 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f000 8087 	beq.w	80017be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016b0:	4b92      	ldr	r3, [pc, #584]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 030c 	and.w	r3, r3, #12
 80016b8:	2b04      	cmp	r3, #4
 80016ba:	d00c      	beq.n	80016d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016bc:	4b8f      	ldr	r3, [pc, #572]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f003 030c 	and.w	r3, r3, #12
 80016c4:	2b08      	cmp	r3, #8
 80016c6:	d112      	bne.n	80016ee <HAL_RCC_OscConfig+0x5e>
 80016c8:	4b8c      	ldr	r3, [pc, #560]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016d4:	d10b      	bne.n	80016ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016d6:	4b89      	ldr	r3, [pc, #548]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d06c      	beq.n	80017bc <HAL_RCC_OscConfig+0x12c>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d168      	bne.n	80017bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e24c      	b.n	8001b88 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016f6:	d106      	bne.n	8001706 <HAL_RCC_OscConfig+0x76>
 80016f8:	4b80      	ldr	r3, [pc, #512]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a7f      	ldr	r2, [pc, #508]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 80016fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001702:	6013      	str	r3, [r2, #0]
 8001704:	e02e      	b.n	8001764 <HAL_RCC_OscConfig+0xd4>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d10c      	bne.n	8001728 <HAL_RCC_OscConfig+0x98>
 800170e:	4b7b      	ldr	r3, [pc, #492]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a7a      	ldr	r2, [pc, #488]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 8001714:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001718:	6013      	str	r3, [r2, #0]
 800171a:	4b78      	ldr	r3, [pc, #480]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a77      	ldr	r2, [pc, #476]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 8001720:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001724:	6013      	str	r3, [r2, #0]
 8001726:	e01d      	b.n	8001764 <HAL_RCC_OscConfig+0xd4>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001730:	d10c      	bne.n	800174c <HAL_RCC_OscConfig+0xbc>
 8001732:	4b72      	ldr	r3, [pc, #456]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a71      	ldr	r2, [pc, #452]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 8001738:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800173c:	6013      	str	r3, [r2, #0]
 800173e:	4b6f      	ldr	r3, [pc, #444]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a6e      	ldr	r2, [pc, #440]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 8001744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001748:	6013      	str	r3, [r2, #0]
 800174a:	e00b      	b.n	8001764 <HAL_RCC_OscConfig+0xd4>
 800174c:	4b6b      	ldr	r3, [pc, #428]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a6a      	ldr	r2, [pc, #424]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 8001752:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001756:	6013      	str	r3, [r2, #0]
 8001758:	4b68      	ldr	r3, [pc, #416]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a67      	ldr	r2, [pc, #412]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 800175e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001762:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d013      	beq.n	8001794 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176c:	f7ff fad8 	bl	8000d20 <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001774:	f7ff fad4 	bl	8000d20 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b64      	cmp	r3, #100	; 0x64
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e200      	b.n	8001b88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001786:	4b5d      	ldr	r3, [pc, #372]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d0f0      	beq.n	8001774 <HAL_RCC_OscConfig+0xe4>
 8001792:	e014      	b.n	80017be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001794:	f7ff fac4 	bl	8000d20 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800179c:	f7ff fac0 	bl	8000d20 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b64      	cmp	r3, #100	; 0x64
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e1ec      	b.n	8001b88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ae:	4b53      	ldr	r3, [pc, #332]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1f0      	bne.n	800179c <HAL_RCC_OscConfig+0x10c>
 80017ba:	e000      	b.n	80017be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d063      	beq.n	8001892 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017ca:	4b4c      	ldr	r3, [pc, #304]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f003 030c 	and.w	r3, r3, #12
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d00b      	beq.n	80017ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017d6:	4b49      	ldr	r3, [pc, #292]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f003 030c 	and.w	r3, r3, #12
 80017de:	2b08      	cmp	r3, #8
 80017e0:	d11c      	bne.n	800181c <HAL_RCC_OscConfig+0x18c>
 80017e2:	4b46      	ldr	r3, [pc, #280]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d116      	bne.n	800181c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ee:	4b43      	ldr	r3, [pc, #268]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d005      	beq.n	8001806 <HAL_RCC_OscConfig+0x176>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	691b      	ldr	r3, [r3, #16]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d001      	beq.n	8001806 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e1c0      	b.n	8001b88 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001806:	4b3d      	ldr	r3, [pc, #244]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	695b      	ldr	r3, [r3, #20]
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	4939      	ldr	r1, [pc, #228]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 8001816:	4313      	orrs	r3, r2
 8001818:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800181a:	e03a      	b.n	8001892 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	691b      	ldr	r3, [r3, #16]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d020      	beq.n	8001866 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001824:	4b36      	ldr	r3, [pc, #216]	; (8001900 <HAL_RCC_OscConfig+0x270>)
 8001826:	2201      	movs	r2, #1
 8001828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182a:	f7ff fa79 	bl	8000d20 <HAL_GetTick>
 800182e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001830:	e008      	b.n	8001844 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001832:	f7ff fa75 	bl	8000d20 <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e1a1      	b.n	8001b88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001844:	4b2d      	ldr	r3, [pc, #180]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d0f0      	beq.n	8001832 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001850:	4b2a      	ldr	r3, [pc, #168]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	695b      	ldr	r3, [r3, #20]
 800185c:	00db      	lsls	r3, r3, #3
 800185e:	4927      	ldr	r1, [pc, #156]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 8001860:	4313      	orrs	r3, r2
 8001862:	600b      	str	r3, [r1, #0]
 8001864:	e015      	b.n	8001892 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001866:	4b26      	ldr	r3, [pc, #152]	; (8001900 <HAL_RCC_OscConfig+0x270>)
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186c:	f7ff fa58 	bl	8000d20 <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001874:	f7ff fa54 	bl	8000d20 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e180      	b.n	8001b88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001886:	4b1d      	ldr	r3, [pc, #116]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1f0      	bne.n	8001874 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0308 	and.w	r3, r3, #8
 800189a:	2b00      	cmp	r3, #0
 800189c:	d03a      	beq.n	8001914 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d019      	beq.n	80018da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018a6:	4b17      	ldr	r3, [pc, #92]	; (8001904 <HAL_RCC_OscConfig+0x274>)
 80018a8:	2201      	movs	r2, #1
 80018aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ac:	f7ff fa38 	bl	8000d20 <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018b4:	f7ff fa34 	bl	8000d20 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e160      	b.n	8001b88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018c6:	4b0d      	ldr	r3, [pc, #52]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 80018c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d0f0      	beq.n	80018b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018d2:	2001      	movs	r0, #1
 80018d4:	f000 face 	bl	8001e74 <RCC_Delay>
 80018d8:	e01c      	b.n	8001914 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018da:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <HAL_RCC_OscConfig+0x274>)
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e0:	f7ff fa1e 	bl	8000d20 <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018e6:	e00f      	b.n	8001908 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018e8:	f7ff fa1a 	bl	8000d20 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d908      	bls.n	8001908 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e146      	b.n	8001b88 <HAL_RCC_OscConfig+0x4f8>
 80018fa:	bf00      	nop
 80018fc:	40021000 	.word	0x40021000
 8001900:	42420000 	.word	0x42420000
 8001904:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001908:	4b92      	ldr	r3, [pc, #584]	; (8001b54 <HAL_RCC_OscConfig+0x4c4>)
 800190a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d1e9      	bne.n	80018e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0304 	and.w	r3, r3, #4
 800191c:	2b00      	cmp	r3, #0
 800191e:	f000 80a6 	beq.w	8001a6e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001922:	2300      	movs	r3, #0
 8001924:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001926:	4b8b      	ldr	r3, [pc, #556]	; (8001b54 <HAL_RCC_OscConfig+0x4c4>)
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d10d      	bne.n	800194e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001932:	4b88      	ldr	r3, [pc, #544]	; (8001b54 <HAL_RCC_OscConfig+0x4c4>)
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	4a87      	ldr	r2, [pc, #540]	; (8001b54 <HAL_RCC_OscConfig+0x4c4>)
 8001938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800193c:	61d3      	str	r3, [r2, #28]
 800193e:	4b85      	ldr	r3, [pc, #532]	; (8001b54 <HAL_RCC_OscConfig+0x4c4>)
 8001940:	69db      	ldr	r3, [r3, #28]
 8001942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001946:	60bb      	str	r3, [r7, #8]
 8001948:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800194a:	2301      	movs	r3, #1
 800194c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800194e:	4b82      	ldr	r3, [pc, #520]	; (8001b58 <HAL_RCC_OscConfig+0x4c8>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001956:	2b00      	cmp	r3, #0
 8001958:	d118      	bne.n	800198c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800195a:	4b7f      	ldr	r3, [pc, #508]	; (8001b58 <HAL_RCC_OscConfig+0x4c8>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a7e      	ldr	r2, [pc, #504]	; (8001b58 <HAL_RCC_OscConfig+0x4c8>)
 8001960:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001964:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001966:	f7ff f9db 	bl	8000d20 <HAL_GetTick>
 800196a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800196c:	e008      	b.n	8001980 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800196e:	f7ff f9d7 	bl	8000d20 <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b64      	cmp	r3, #100	; 0x64
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e103      	b.n	8001b88 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001980:	4b75      	ldr	r3, [pc, #468]	; (8001b58 <HAL_RCC_OscConfig+0x4c8>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001988:	2b00      	cmp	r3, #0
 800198a:	d0f0      	beq.n	800196e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d106      	bne.n	80019a2 <HAL_RCC_OscConfig+0x312>
 8001994:	4b6f      	ldr	r3, [pc, #444]	; (8001b54 <HAL_RCC_OscConfig+0x4c4>)
 8001996:	6a1b      	ldr	r3, [r3, #32]
 8001998:	4a6e      	ldr	r2, [pc, #440]	; (8001b54 <HAL_RCC_OscConfig+0x4c4>)
 800199a:	f043 0301 	orr.w	r3, r3, #1
 800199e:	6213      	str	r3, [r2, #32]
 80019a0:	e02d      	b.n	80019fe <HAL_RCC_OscConfig+0x36e>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d10c      	bne.n	80019c4 <HAL_RCC_OscConfig+0x334>
 80019aa:	4b6a      	ldr	r3, [pc, #424]	; (8001b54 <HAL_RCC_OscConfig+0x4c4>)
 80019ac:	6a1b      	ldr	r3, [r3, #32]
 80019ae:	4a69      	ldr	r2, [pc, #420]	; (8001b54 <HAL_RCC_OscConfig+0x4c4>)
 80019b0:	f023 0301 	bic.w	r3, r3, #1
 80019b4:	6213      	str	r3, [r2, #32]
 80019b6:	4b67      	ldr	r3, [pc, #412]	; (8001b54 <HAL_RCC_OscConfig+0x4c4>)
 80019b8:	6a1b      	ldr	r3, [r3, #32]
 80019ba:	4a66      	ldr	r2, [pc, #408]	; (8001b54 <HAL_RCC_OscConfig+0x4c4>)
 80019bc:	f023 0304 	bic.w	r3, r3, #4
 80019c0:	6213      	str	r3, [r2, #32]
 80019c2:	e01c      	b.n	80019fe <HAL_RCC_OscConfig+0x36e>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	2b05      	cmp	r3, #5
 80019ca:	d10c      	bne.n	80019e6 <HAL_RCC_OscConfig+0x356>
 80019cc:	4b61      	ldr	r3, [pc, #388]	; (8001b54 <HAL_RCC_OscConfig+0x4c4>)
 80019ce:	6a1b      	ldr	r3, [r3, #32]
 80019d0:	4a60      	ldr	r2, [pc, #384]	; (8001b54 <HAL_RCC_OscConfig+0x4c4>)
 80019d2:	f043 0304 	orr.w	r3, r3, #4
 80019d6:	6213      	str	r3, [r2, #32]
 80019d8:	4b5e      	ldr	r3, [pc, #376]	; (8001b54 <HAL_RCC_OscConfig+0x4c4>)
 80019da:	6a1b      	ldr	r3, [r3, #32]
 80019dc:	4a5d      	ldr	r2, [pc, #372]	; (8001b54 <HAL_RCC_OscConfig+0x4c4>)
 80019de:	f043 0301 	orr.w	r3, r3, #1
 80019e2:	6213      	str	r3, [r2, #32]
 80019e4:	e00b      	b.n	80019fe <HAL_RCC_OscConfig+0x36e>
 80019e6:	4b5b      	ldr	r3, [pc, #364]	; (8001b54 <HAL_RCC_OscConfig+0x4c4>)
 80019e8:	6a1b      	ldr	r3, [r3, #32]
 80019ea:	4a5a      	ldr	r2, [pc, #360]	; (8001b54 <HAL_RCC_OscConfig+0x4c4>)
 80019ec:	f023 0301 	bic.w	r3, r3, #1
 80019f0:	6213      	str	r3, [r2, #32]
 80019f2:	4b58      	ldr	r3, [pc, #352]	; (8001b54 <HAL_RCC_OscConfig+0x4c4>)
 80019f4:	6a1b      	ldr	r3, [r3, #32]
 80019f6:	4a57      	ldr	r2, [pc, #348]	; (8001b54 <HAL_RCC_OscConfig+0x4c4>)
 80019f8:	f023 0304 	bic.w	r3, r3, #4
 80019fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d015      	beq.n	8001a32 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a06:	f7ff f98b 	bl	8000d20 <HAL_GetTick>
 8001a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a0c:	e00a      	b.n	8001a24 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a0e:	f7ff f987 	bl	8000d20 <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e0b1      	b.n	8001b88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a24:	4b4b      	ldr	r3, [pc, #300]	; (8001b54 <HAL_RCC_OscConfig+0x4c4>)
 8001a26:	6a1b      	ldr	r3, [r3, #32]
 8001a28:	f003 0302 	and.w	r3, r3, #2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d0ee      	beq.n	8001a0e <HAL_RCC_OscConfig+0x37e>
 8001a30:	e014      	b.n	8001a5c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a32:	f7ff f975 	bl	8000d20 <HAL_GetTick>
 8001a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a38:	e00a      	b.n	8001a50 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a3a:	f7ff f971 	bl	8000d20 <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e09b      	b.n	8001b88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a50:	4b40      	ldr	r3, [pc, #256]	; (8001b54 <HAL_RCC_OscConfig+0x4c4>)
 8001a52:	6a1b      	ldr	r3, [r3, #32]
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d1ee      	bne.n	8001a3a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a5c:	7dfb      	ldrb	r3, [r7, #23]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d105      	bne.n	8001a6e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a62:	4b3c      	ldr	r3, [pc, #240]	; (8001b54 <HAL_RCC_OscConfig+0x4c4>)
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	4a3b      	ldr	r2, [pc, #236]	; (8001b54 <HAL_RCC_OscConfig+0x4c4>)
 8001a68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a6c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	69db      	ldr	r3, [r3, #28]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f000 8087 	beq.w	8001b86 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a78:	4b36      	ldr	r3, [pc, #216]	; (8001b54 <HAL_RCC_OscConfig+0x4c4>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f003 030c 	and.w	r3, r3, #12
 8001a80:	2b08      	cmp	r3, #8
 8001a82:	d061      	beq.n	8001b48 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	69db      	ldr	r3, [r3, #28]
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d146      	bne.n	8001b1a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a8c:	4b33      	ldr	r3, [pc, #204]	; (8001b5c <HAL_RCC_OscConfig+0x4cc>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a92:	f7ff f945 	bl	8000d20 <HAL_GetTick>
 8001a96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a98:	e008      	b.n	8001aac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a9a:	f7ff f941 	bl	8000d20 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e06d      	b.n	8001b88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aac:	4b29      	ldr	r3, [pc, #164]	; (8001b54 <HAL_RCC_OscConfig+0x4c4>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1f0      	bne.n	8001a9a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a1b      	ldr	r3, [r3, #32]
 8001abc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ac0:	d108      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ac2:	4b24      	ldr	r3, [pc, #144]	; (8001b54 <HAL_RCC_OscConfig+0x4c4>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	4921      	ldr	r1, [pc, #132]	; (8001b54 <HAL_RCC_OscConfig+0x4c4>)
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ad4:	4b1f      	ldr	r3, [pc, #124]	; (8001b54 <HAL_RCC_OscConfig+0x4c4>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a19      	ldr	r1, [r3, #32]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae4:	430b      	orrs	r3, r1
 8001ae6:	491b      	ldr	r1, [pc, #108]	; (8001b54 <HAL_RCC_OscConfig+0x4c4>)
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aec:	4b1b      	ldr	r3, [pc, #108]	; (8001b5c <HAL_RCC_OscConfig+0x4cc>)
 8001aee:	2201      	movs	r2, #1
 8001af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af2:	f7ff f915 	bl	8000d20 <HAL_GetTick>
 8001af6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001af8:	e008      	b.n	8001b0c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001afa:	f7ff f911 	bl	8000d20 <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e03d      	b.n	8001b88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b0c:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <HAL_RCC_OscConfig+0x4c4>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d0f0      	beq.n	8001afa <HAL_RCC_OscConfig+0x46a>
 8001b18:	e035      	b.n	8001b86 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b1a:	4b10      	ldr	r3, [pc, #64]	; (8001b5c <HAL_RCC_OscConfig+0x4cc>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b20:	f7ff f8fe 	bl	8000d20 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b28:	f7ff f8fa 	bl	8000d20 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e026      	b.n	8001b88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b3a:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <HAL_RCC_OscConfig+0x4c4>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1f0      	bne.n	8001b28 <HAL_RCC_OscConfig+0x498>
 8001b46:	e01e      	b.n	8001b86 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	69db      	ldr	r3, [r3, #28]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d107      	bne.n	8001b60 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e019      	b.n	8001b88 <HAL_RCC_OscConfig+0x4f8>
 8001b54:	40021000 	.word	0x40021000
 8001b58:	40007000 	.word	0x40007000
 8001b5c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b60:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <HAL_RCC_OscConfig+0x500>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a1b      	ldr	r3, [r3, #32]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d106      	bne.n	8001b82 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d001      	beq.n	8001b86 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e000      	b.n	8001b88 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001b86:	2300      	movs	r3, #0
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3718      	adds	r7, #24
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40021000 	.word	0x40021000

08001b94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d101      	bne.n	8001ba8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e0d0      	b.n	8001d4a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ba8:	4b6a      	ldr	r3, [pc, #424]	; (8001d54 <HAL_RCC_ClockConfig+0x1c0>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0307 	and.w	r3, r3, #7
 8001bb0:	683a      	ldr	r2, [r7, #0]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d910      	bls.n	8001bd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb6:	4b67      	ldr	r3, [pc, #412]	; (8001d54 <HAL_RCC_ClockConfig+0x1c0>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f023 0207 	bic.w	r2, r3, #7
 8001bbe:	4965      	ldr	r1, [pc, #404]	; (8001d54 <HAL_RCC_ClockConfig+0x1c0>)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bc6:	4b63      	ldr	r3, [pc, #396]	; (8001d54 <HAL_RCC_ClockConfig+0x1c0>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d001      	beq.n	8001bd8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e0b8      	b.n	8001d4a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d020      	beq.n	8001c26 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0304 	and.w	r3, r3, #4
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d005      	beq.n	8001bfc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bf0:	4b59      	ldr	r3, [pc, #356]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	4a58      	ldr	r2, [pc, #352]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001bfa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0308 	and.w	r3, r3, #8
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d005      	beq.n	8001c14 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c08:	4b53      	ldr	r3, [pc, #332]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	4a52      	ldr	r2, [pc, #328]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001c0e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c12:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c14:	4b50      	ldr	r3, [pc, #320]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	494d      	ldr	r1, [pc, #308]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d040      	beq.n	8001cb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d107      	bne.n	8001c4a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c3a:	4b47      	ldr	r3, [pc, #284]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d115      	bne.n	8001c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e07f      	b.n	8001d4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d107      	bne.n	8001c62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c52:	4b41      	ldr	r3, [pc, #260]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d109      	bne.n	8001c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e073      	b.n	8001d4a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c62:	4b3d      	ldr	r3, [pc, #244]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e06b      	b.n	8001d4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c72:	4b39      	ldr	r3, [pc, #228]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f023 0203 	bic.w	r2, r3, #3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	4936      	ldr	r1, [pc, #216]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c84:	f7ff f84c 	bl	8000d20 <HAL_GetTick>
 8001c88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c8a:	e00a      	b.n	8001ca2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c8c:	f7ff f848 	bl	8000d20 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e053      	b.n	8001d4a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ca2:	4b2d      	ldr	r3, [pc, #180]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f003 020c 	and.w	r2, r3, #12
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d1eb      	bne.n	8001c8c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cb4:	4b27      	ldr	r3, [pc, #156]	; (8001d54 <HAL_RCC_ClockConfig+0x1c0>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0307 	and.w	r3, r3, #7
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d210      	bcs.n	8001ce4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc2:	4b24      	ldr	r3, [pc, #144]	; (8001d54 <HAL_RCC_ClockConfig+0x1c0>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f023 0207 	bic.w	r2, r3, #7
 8001cca:	4922      	ldr	r1, [pc, #136]	; (8001d54 <HAL_RCC_ClockConfig+0x1c0>)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd2:	4b20      	ldr	r3, [pc, #128]	; (8001d54 <HAL_RCC_ClockConfig+0x1c0>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d001      	beq.n	8001ce4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e032      	b.n	8001d4a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0304 	and.w	r3, r3, #4
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d008      	beq.n	8001d02 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cf0:	4b19      	ldr	r3, [pc, #100]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	4916      	ldr	r1, [pc, #88]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0308 	and.w	r3, r3, #8
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d009      	beq.n	8001d22 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d0e:	4b12      	ldr	r3, [pc, #72]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	490e      	ldr	r1, [pc, #56]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d22:	f000 f821 	bl	8001d68 <HAL_RCC_GetSysClockFreq>
 8001d26:	4602      	mov	r2, r0
 8001d28:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	091b      	lsrs	r3, r3, #4
 8001d2e:	f003 030f 	and.w	r3, r3, #15
 8001d32:	490a      	ldr	r1, [pc, #40]	; (8001d5c <HAL_RCC_ClockConfig+0x1c8>)
 8001d34:	5ccb      	ldrb	r3, [r1, r3]
 8001d36:	fa22 f303 	lsr.w	r3, r2, r3
 8001d3a:	4a09      	ldr	r2, [pc, #36]	; (8001d60 <HAL_RCC_ClockConfig+0x1cc>)
 8001d3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d3e:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <HAL_RCC_ClockConfig+0x1d0>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7fe ffaa 	bl	8000c9c <HAL_InitTick>

  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40022000 	.word	0x40022000
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	080023ec 	.word	0x080023ec
 8001d60:	20000000 	.word	0x20000000
 8001d64:	20000004 	.word	0x20000004

08001d68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b087      	sub	sp, #28
 8001d6c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	2300      	movs	r3, #0
 8001d74:	60bb      	str	r3, [r7, #8]
 8001d76:	2300      	movs	r3, #0
 8001d78:	617b      	str	r3, [r7, #20]
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d82:	4b1e      	ldr	r3, [pc, #120]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x94>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f003 030c 	and.w	r3, r3, #12
 8001d8e:	2b04      	cmp	r3, #4
 8001d90:	d002      	beq.n	8001d98 <HAL_RCC_GetSysClockFreq+0x30>
 8001d92:	2b08      	cmp	r3, #8
 8001d94:	d003      	beq.n	8001d9e <HAL_RCC_GetSysClockFreq+0x36>
 8001d96:	e027      	b.n	8001de8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d98:	4b19      	ldr	r3, [pc, #100]	; (8001e00 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d9a:	613b      	str	r3, [r7, #16]
      break;
 8001d9c:	e027      	b.n	8001dee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	0c9b      	lsrs	r3, r3, #18
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	4a17      	ldr	r2, [pc, #92]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001da8:	5cd3      	ldrb	r3, [r2, r3]
 8001daa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d010      	beq.n	8001dd8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001db6:	4b11      	ldr	r3, [pc, #68]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x94>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	0c5b      	lsrs	r3, r3, #17
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	4a11      	ldr	r2, [pc, #68]	; (8001e08 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001dc2:	5cd3      	ldrb	r3, [r2, r3]
 8001dc4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a0d      	ldr	r2, [pc, #52]	; (8001e00 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dca:	fb03 f202 	mul.w	r2, r3, r2
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd4:	617b      	str	r3, [r7, #20]
 8001dd6:	e004      	b.n	8001de2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4a0c      	ldr	r2, [pc, #48]	; (8001e0c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ddc:	fb02 f303 	mul.w	r3, r2, r3
 8001de0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	613b      	str	r3, [r7, #16]
      break;
 8001de6:	e002      	b.n	8001dee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001de8:	4b05      	ldr	r3, [pc, #20]	; (8001e00 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dea:	613b      	str	r3, [r7, #16]
      break;
 8001dec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dee:	693b      	ldr	r3, [r7, #16]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	371c      	adds	r7, #28
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bc80      	pop	{r7}
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	007a1200 	.word	0x007a1200
 8001e04:	08002404 	.word	0x08002404
 8001e08:	08002414 	.word	0x08002414
 8001e0c:	003d0900 	.word	0x003d0900

08001e10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e14:	4b02      	ldr	r3, [pc, #8]	; (8001e20 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e16:	681b      	ldr	r3, [r3, #0]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bc80      	pop	{r7}
 8001e1e:	4770      	bx	lr
 8001e20:	20000000 	.word	0x20000000

08001e24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e28:	f7ff fff2 	bl	8001e10 <HAL_RCC_GetHCLKFreq>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	4b05      	ldr	r3, [pc, #20]	; (8001e44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	0a1b      	lsrs	r3, r3, #8
 8001e34:	f003 0307 	and.w	r3, r3, #7
 8001e38:	4903      	ldr	r1, [pc, #12]	; (8001e48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e3a:	5ccb      	ldrb	r3, [r1, r3]
 8001e3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40021000 	.word	0x40021000
 8001e48:	080023fc 	.word	0x080023fc

08001e4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e50:	f7ff ffde 	bl	8001e10 <HAL_RCC_GetHCLKFreq>
 8001e54:	4602      	mov	r2, r0
 8001e56:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	0adb      	lsrs	r3, r3, #11
 8001e5c:	f003 0307 	and.w	r3, r3, #7
 8001e60:	4903      	ldr	r1, [pc, #12]	; (8001e70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e62:	5ccb      	ldrb	r3, [r1, r3]
 8001e64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	080023fc 	.word	0x080023fc

08001e74 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ea8 <RCC_Delay+0x34>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a0a      	ldr	r2, [pc, #40]	; (8001eac <RCC_Delay+0x38>)
 8001e82:	fba2 2303 	umull	r2, r3, r2, r3
 8001e86:	0a5b      	lsrs	r3, r3, #9
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	fb02 f303 	mul.w	r3, r2, r3
 8001e8e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e90:	bf00      	nop
  }
  while (Delay --);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	1e5a      	subs	r2, r3, #1
 8001e96:	60fa      	str	r2, [r7, #12]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d1f9      	bne.n	8001e90 <RCC_Delay+0x1c>
}
 8001e9c:	bf00      	nop
 8001e9e:	bf00      	nop
 8001ea0:	3714      	adds	r7, #20
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bc80      	pop	{r7}
 8001ea6:	4770      	bx	lr
 8001ea8:	20000000 	.word	0x20000000
 8001eac:	10624dd3 	.word	0x10624dd3

08001eb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e042      	b.n	8001f48 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d106      	bne.n	8001edc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7fe fde4 	bl	8000aa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2224      	movs	r2, #36	; 0x24
 8001ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68da      	ldr	r2, [r3, #12]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ef2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f000 f9af 	bl	8002258 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	691a      	ldr	r2, [r3, #16]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	695a      	ldr	r2, [r3, #20]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68da      	ldr	r2, [r3, #12]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2220      	movs	r2, #32
 8001f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2220      	movs	r2, #32
 8001f3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08a      	sub	sp, #40	; 0x28
 8001f54:	af02      	add	r7, sp, #8
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	603b      	str	r3, [r7, #0]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f60:	2300      	movs	r3, #0
 8001f62:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	2b20      	cmp	r3, #32
 8001f6e:	d16d      	bne.n	800204c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d002      	beq.n	8001f7c <HAL_UART_Transmit+0x2c>
 8001f76:	88fb      	ldrh	r3, [r7, #6]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d101      	bne.n	8001f80 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e066      	b.n	800204e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2221      	movs	r2, #33	; 0x21
 8001f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f8e:	f7fe fec7 	bl	8000d20 <HAL_GetTick>
 8001f92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	88fa      	ldrh	r2, [r7, #6]
 8001f98:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	88fa      	ldrh	r2, [r7, #6]
 8001f9e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fa8:	d108      	bne.n	8001fbc <HAL_UART_Transmit+0x6c>
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d104      	bne.n	8001fbc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	61bb      	str	r3, [r7, #24]
 8001fba:	e003      	b.n	8001fc4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001fc4:	e02a      	b.n	800201c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	9300      	str	r3, [sp, #0]
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	2180      	movs	r1, #128	; 0x80
 8001fd0:	68f8      	ldr	r0, [r7, #12]
 8001fd2:	f000 f8d2 	bl	800217a <UART_WaitOnFlagUntilTimeout>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e036      	b.n	800204e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d10b      	bne.n	8001ffe <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	881b      	ldrh	r3, [r3, #0]
 8001fea:	461a      	mov	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ff4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	3302      	adds	r3, #2
 8001ffa:	61bb      	str	r3, [r7, #24]
 8001ffc:	e007      	b.n	800200e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	781a      	ldrb	r2, [r3, #0]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	3301      	adds	r3, #1
 800200c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002012:	b29b      	uxth	r3, r3
 8002014:	3b01      	subs	r3, #1
 8002016:	b29a      	uxth	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002020:	b29b      	uxth	r3, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1cf      	bne.n	8001fc6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	9300      	str	r3, [sp, #0]
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	2200      	movs	r2, #0
 800202e:	2140      	movs	r1, #64	; 0x40
 8002030:	68f8      	ldr	r0, [r7, #12]
 8002032:	f000 f8a2 	bl	800217a <UART_WaitOnFlagUntilTimeout>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e006      	b.n	800204e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2220      	movs	r2, #32
 8002044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002048:	2300      	movs	r3, #0
 800204a:	e000      	b.n	800204e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800204c:	2302      	movs	r3, #2
  }
}
 800204e:	4618      	mov	r0, r3
 8002050:	3720      	adds	r7, #32
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b08a      	sub	sp, #40	; 0x28
 800205a:	af02      	add	r7, sp, #8
 800205c:	60f8      	str	r0, [r7, #12]
 800205e:	60b9      	str	r1, [r7, #8]
 8002060:	603b      	str	r3, [r7, #0]
 8002062:	4613      	mov	r3, r2
 8002064:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002066:	2300      	movs	r3, #0
 8002068:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b20      	cmp	r3, #32
 8002074:	d17c      	bne.n	8002170 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d002      	beq.n	8002082 <HAL_UART_Receive+0x2c>
 800207c:	88fb      	ldrh	r3, [r7, #6]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e075      	b.n	8002172 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2200      	movs	r2, #0
 800208a:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2222      	movs	r2, #34	; 0x22
 8002090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2200      	movs	r2, #0
 8002098:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800209a:	f7fe fe41 	bl	8000d20 <HAL_GetTick>
 800209e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	88fa      	ldrh	r2, [r7, #6]
 80020a4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	88fa      	ldrh	r2, [r7, #6]
 80020aa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020b4:	d108      	bne.n	80020c8 <HAL_UART_Receive+0x72>
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d104      	bne.n	80020c8 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 80020be:	2300      	movs	r3, #0
 80020c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	61bb      	str	r3, [r7, #24]
 80020c6:	e003      	b.n	80020d0 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80020d0:	e043      	b.n	800215a <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	9300      	str	r3, [sp, #0]
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	2200      	movs	r2, #0
 80020da:	2120      	movs	r1, #32
 80020dc:	68f8      	ldr	r0, [r7, #12]
 80020de:	f000 f84c 	bl	800217a <UART_WaitOnFlagUntilTimeout>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e042      	b.n	8002172 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d10c      	bne.n	800210c <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020fe:	b29a      	uxth	r2, r3
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	3302      	adds	r3, #2
 8002108:	61bb      	str	r3, [r7, #24]
 800210a:	e01f      	b.n	800214c <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002114:	d007      	beq.n	8002126 <HAL_UART_Receive+0xd0>
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d10a      	bne.n	8002134 <HAL_UART_Receive+0xde>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d106      	bne.n	8002134 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	b2da      	uxtb	r2, r3
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	701a      	strb	r2, [r3, #0]
 8002132:	e008      	b.n	8002146 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	b2db      	uxtb	r3, r3
 800213c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002140:	b2da      	uxtb	r2, r3
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	3301      	adds	r3, #1
 800214a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002150:	b29b      	uxth	r3, r3
 8002152:	3b01      	subs	r3, #1
 8002154:	b29a      	uxth	r2, r3
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800215e:	b29b      	uxth	r3, r3
 8002160:	2b00      	cmp	r3, #0
 8002162:	d1b6      	bne.n	80020d2 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2220      	movs	r2, #32
 8002168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 800216c:	2300      	movs	r3, #0
 800216e:	e000      	b.n	8002172 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002170:	2302      	movs	r3, #2
  }
}
 8002172:	4618      	mov	r0, r3
 8002174:	3720      	adds	r7, #32
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b090      	sub	sp, #64	; 0x40
 800217e:	af00      	add	r7, sp, #0
 8002180:	60f8      	str	r0, [r7, #12]
 8002182:	60b9      	str	r1, [r7, #8]
 8002184:	603b      	str	r3, [r7, #0]
 8002186:	4613      	mov	r3, r2
 8002188:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800218a:	e050      	b.n	800222e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800218c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800218e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002192:	d04c      	beq.n	800222e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002194:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002196:	2b00      	cmp	r3, #0
 8002198:	d007      	beq.n	80021aa <UART_WaitOnFlagUntilTimeout+0x30>
 800219a:	f7fe fdc1 	bl	8000d20 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d241      	bcs.n	800222e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	330c      	adds	r3, #12
 80021b0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b4:	e853 3f00 	ldrex	r3, [r3]
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80021ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80021c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	330c      	adds	r3, #12
 80021c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021ca:	637a      	str	r2, [r7, #52]	; 0x34
 80021cc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80021d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021d2:	e841 2300 	strex	r3, r2, [r1]
 80021d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80021d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1e5      	bne.n	80021aa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	3314      	adds	r3, #20
 80021e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	e853 3f00 	ldrex	r3, [r3]
 80021ec:	613b      	str	r3, [r7, #16]
   return(result);
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	f023 0301 	bic.w	r3, r3, #1
 80021f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	3314      	adds	r3, #20
 80021fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021fe:	623a      	str	r2, [r7, #32]
 8002200:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002202:	69f9      	ldr	r1, [r7, #28]
 8002204:	6a3a      	ldr	r2, [r7, #32]
 8002206:	e841 2300 	strex	r3, r2, [r1]
 800220a:	61bb      	str	r3, [r7, #24]
   return(result);
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1e5      	bne.n	80021de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2220      	movs	r2, #32
 8002216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2220      	movs	r2, #32
 800221e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e00f      	b.n	800224e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	4013      	ands	r3, r2
 8002238:	68ba      	ldr	r2, [r7, #8]
 800223a:	429a      	cmp	r2, r3
 800223c:	bf0c      	ite	eq
 800223e:	2301      	moveq	r3, #1
 8002240:	2300      	movne	r3, #0
 8002242:	b2db      	uxtb	r3, r3
 8002244:	461a      	mov	r2, r3
 8002246:	79fb      	ldrb	r3, [r7, #7]
 8002248:	429a      	cmp	r2, r3
 800224a:	d09f      	beq.n	800218c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3740      	adds	r7, #64	; 0x40
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
	...

08002258 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	68da      	ldr	r2, [r3, #12]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	430a      	orrs	r2, r1
 8002274:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689a      	ldr	r2, [r3, #8]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	431a      	orrs	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	695b      	ldr	r3, [r3, #20]
 8002284:	4313      	orrs	r3, r2
 8002286:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002292:	f023 030c 	bic.w	r3, r3, #12
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	6812      	ldr	r2, [r2, #0]
 800229a:	68b9      	ldr	r1, [r7, #8]
 800229c:	430b      	orrs	r3, r1
 800229e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	699a      	ldr	r2, [r3, #24]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	430a      	orrs	r2, r1
 80022b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a2c      	ldr	r2, [pc, #176]	; (800236c <UART_SetConfig+0x114>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d103      	bne.n	80022c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80022c0:	f7ff fdc4 	bl	8001e4c <HAL_RCC_GetPCLK2Freq>
 80022c4:	60f8      	str	r0, [r7, #12]
 80022c6:	e002      	b.n	80022ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80022c8:	f7ff fdac 	bl	8001e24 <HAL_RCC_GetPCLK1Freq>
 80022cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	4613      	mov	r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	4413      	add	r3, r2
 80022d6:	009a      	lsls	r2, r3, #2
 80022d8:	441a      	add	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e4:	4a22      	ldr	r2, [pc, #136]	; (8002370 <UART_SetConfig+0x118>)
 80022e6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ea:	095b      	lsrs	r3, r3, #5
 80022ec:	0119      	lsls	r1, r3, #4
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	4613      	mov	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	4413      	add	r3, r2
 80022f6:	009a      	lsls	r2, r3, #2
 80022f8:	441a      	add	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	fbb2 f2f3 	udiv	r2, r2, r3
 8002304:	4b1a      	ldr	r3, [pc, #104]	; (8002370 <UART_SetConfig+0x118>)
 8002306:	fba3 0302 	umull	r0, r3, r3, r2
 800230a:	095b      	lsrs	r3, r3, #5
 800230c:	2064      	movs	r0, #100	; 0x64
 800230e:	fb00 f303 	mul.w	r3, r0, r3
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	011b      	lsls	r3, r3, #4
 8002316:	3332      	adds	r3, #50	; 0x32
 8002318:	4a15      	ldr	r2, [pc, #84]	; (8002370 <UART_SetConfig+0x118>)
 800231a:	fba2 2303 	umull	r2, r3, r2, r3
 800231e:	095b      	lsrs	r3, r3, #5
 8002320:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002324:	4419      	add	r1, r3
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	4613      	mov	r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	4413      	add	r3, r2
 800232e:	009a      	lsls	r2, r3, #2
 8002330:	441a      	add	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	fbb2 f2f3 	udiv	r2, r2, r3
 800233c:	4b0c      	ldr	r3, [pc, #48]	; (8002370 <UART_SetConfig+0x118>)
 800233e:	fba3 0302 	umull	r0, r3, r3, r2
 8002342:	095b      	lsrs	r3, r3, #5
 8002344:	2064      	movs	r0, #100	; 0x64
 8002346:	fb00 f303 	mul.w	r3, r0, r3
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	011b      	lsls	r3, r3, #4
 800234e:	3332      	adds	r3, #50	; 0x32
 8002350:	4a07      	ldr	r2, [pc, #28]	; (8002370 <UART_SetConfig+0x118>)
 8002352:	fba2 2303 	umull	r2, r3, r2, r3
 8002356:	095b      	lsrs	r3, r3, #5
 8002358:	f003 020f 	and.w	r2, r3, #15
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	440a      	add	r2, r1
 8002362:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002364:	bf00      	nop
 8002366:	3710      	adds	r7, #16
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40013800 	.word	0x40013800
 8002370:	51eb851f 	.word	0x51eb851f

08002374 <memset>:
 8002374:	4603      	mov	r3, r0
 8002376:	4402      	add	r2, r0
 8002378:	4293      	cmp	r3, r2
 800237a:	d100      	bne.n	800237e <memset+0xa>
 800237c:	4770      	bx	lr
 800237e:	f803 1b01 	strb.w	r1, [r3], #1
 8002382:	e7f9      	b.n	8002378 <memset+0x4>

08002384 <__libc_init_array>:
 8002384:	b570      	push	{r4, r5, r6, lr}
 8002386:	2600      	movs	r6, #0
 8002388:	4d0c      	ldr	r5, [pc, #48]	; (80023bc <__libc_init_array+0x38>)
 800238a:	4c0d      	ldr	r4, [pc, #52]	; (80023c0 <__libc_init_array+0x3c>)
 800238c:	1b64      	subs	r4, r4, r5
 800238e:	10a4      	asrs	r4, r4, #2
 8002390:	42a6      	cmp	r6, r4
 8002392:	d109      	bne.n	80023a8 <__libc_init_array+0x24>
 8002394:	f000 f81a 	bl	80023cc <_init>
 8002398:	2600      	movs	r6, #0
 800239a:	4d0a      	ldr	r5, [pc, #40]	; (80023c4 <__libc_init_array+0x40>)
 800239c:	4c0a      	ldr	r4, [pc, #40]	; (80023c8 <__libc_init_array+0x44>)
 800239e:	1b64      	subs	r4, r4, r5
 80023a0:	10a4      	asrs	r4, r4, #2
 80023a2:	42a6      	cmp	r6, r4
 80023a4:	d105      	bne.n	80023b2 <__libc_init_array+0x2e>
 80023a6:	bd70      	pop	{r4, r5, r6, pc}
 80023a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80023ac:	4798      	blx	r3
 80023ae:	3601      	adds	r6, #1
 80023b0:	e7ee      	b.n	8002390 <__libc_init_array+0xc>
 80023b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80023b6:	4798      	blx	r3
 80023b8:	3601      	adds	r6, #1
 80023ba:	e7f2      	b.n	80023a2 <__libc_init_array+0x1e>
 80023bc:	08002418 	.word	0x08002418
 80023c0:	08002418 	.word	0x08002418
 80023c4:	08002418 	.word	0x08002418
 80023c8:	0800241c 	.word	0x0800241c

080023cc <_init>:
 80023cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ce:	bf00      	nop
 80023d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023d2:	bc08      	pop	{r3}
 80023d4:	469e      	mov	lr, r3
 80023d6:	4770      	bx	lr

080023d8 <_fini>:
 80023d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023da:	bf00      	nop
 80023dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023de:	bc08      	pop	{r3}
 80023e0:	469e      	mov	lr, r3
 80023e2:	4770      	bx	lr
